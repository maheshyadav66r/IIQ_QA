<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="WorkItemArchieve Retrival task-Validation" significantModified="1735203522324" type="Validation">
          
    
    <Source><![CDATA[
  import sailpoint.object.*;
  import sailpoint.api.*;
  import java.io.FileWriter; 
  import java.io.IOException;
  import java.io.FileInputStream;
  import java.io.BufferedWriter;
  import sailpoint.object.Filter;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailFileAttachment;
  import sailpoint.tools.Util;


  File csvFile = File.createTempFile("iiqWorkItemArchieveReport-", ".tmp.csv");
  csvFile.deleteOnExit(); 

  BufferedWriter bw=new BufferedWriter(new FileWriter(csvFile));

  String delimiter=",";
  String newLine="\n";
  List columnHeaders=new ArrayList();

  columnHeaders.add("applicationName");
  columnHeaders.add("attributeName");
  columnHeaders.add("approver");
  columnHeaders.add("displayValue");
  columnHeaders.add("nativeIdentity");
  columnHeaders.add("operation");
  columnHeaders.add("state");
  columnHeaders.add("value");
  boolean prefix=false;
  for(String columnName:columnHeaders){
    if(prefix){
      bw.append(delimiter);
    }
    bw.append(columnName);
    prefix=true;
  }
  bw.append("\n");

  Filter f1=Filter.eq("state","Finished");
  QueryOptions qo=new QueryOptions();
  qo.add(f1);
  Iterator it=context.search(WorkItemArchive.class,qo);
  while(it.hasNext()){
    WorkItemArchive workItemArchieve=it.next();
    Map output = new HashMap();

    if(workItemArchieve!=null){

      String  identityReqId=workItemArchieve.getIdentityRequestId();
      if(identityReqId!=null && identityReqId!=void ){
        IdentityRequest ir=context.getObjectByName(IdentityRequest.class,identityReqId);

        ApprovalSet approvalSet=(ApprovalSet)workItemArchieve.getAttribute("approvalSet");
        if(approvalSet!=null){
          List ai=(List)approvalSet.getItems();

          if(ai!=null){
            for(ApprovalItem approvalItem : ai ){
              if(approvalItem.getApplication().equals(config.get("application"))) {      
                if(ir.getCompletionStatus().equals(IdentityRequest.CompletionStatus.Pending) &&ir.getExecutionStatus().equals(IdentityRequest.ExecutionStatus.Executing)){

                  // log.error("ApplicationName from approvalItem check-----------successfull-------approvalItem application----------"+approvalItem.getApplicationName()+"--config application----"+config.get("application"));
                  String applicationName=approvalItem.getApplication();
                  String attributeName=approvalItem.getName();
                  String approver=approvalItem.getApprover();
                  String displayValue=approvalItem.getDisplayValue();
                  String nativeIdentity=approvalItem.getNativeIdentity();
                  String operation=approvalItem.getOperation();
                  String state=approvalItem.getState().toString();
                  String value=approvalItem.getValue();

                  if(applicationName!=null){
                    output.put("applicationName",applicationName);
                    // log.error("ApplicationName from approvalItem check  into map----"+approvalItem.getApplicationName());
                  }else{
                    output.put("applicationName",config.get("application"));
                    log.error("config applicatio into map----"+config.get("application"));
                  }
                  output.put("attributeName",attributeName);
                  output.put("approver",approver);
                  output.put("displayValue",displayValue);
                  output.put("nativeIdentity",nativeIdentity);
                  output.put("operation",operation);
                  output.put("state",state);
                  output.put("value",value);

                  boolean commaPrefix=false;
                  for(String columnName:columnHeaders){
                    if(commaPrefix)
                      bw.append(delimiter);
                    String valToWrite=output.get(columnName);
                    if (null != valToWrite)  {
                      if (valToWrite.contains(",")) {
                        bw.append("\"" + valToWrite + "\"");
                      } else {
                        bw.append(valToWrite);
                      }     
                    } else {
                      bw.append("n/a");
                    }
                    commaPrefix = true;   
                  }
                  bw.append("\n");
                }
              }
            }
          }
        }
      }
    }
  }


  bw.flush();
  bw.close();

  log.error("--------end of workitemarchive loop------------------");
  int num;
  String text="";
  FileInputStream fis=new FileInputStream(csvFile);
  while ((num = fis.read()) != -1) {
    text += String.valueOf((char)num);
  }
  log.error("----fis csv format ----"+text);
  fis.close();

  byte[] byteData=Util.readBinaryFile(csvFile);
  EmailTemplate emailTemplate=context.getObjectByName(EmailTemplate.class,"WorkItemArchive_Approvals-Data_csvFile_Email_Template");
  if(emailTemplate==null){
    throw new GeneralException("Email Template was not found: " + templateName);
  }
  EmailFileAttachment attatchment=new EmailFileAttachment ("ApprovalItemsData.csv", EmailFileAttachment.MimeType.MIME_CSV,byteData);
  List recipients=Util.csvToList(config.get("identities"));
  // log.error("recepient identities-----"+config.get("identities"));
  //log.error("recepient identities list-----"+recipients);

  Map args = new HashMap();
  args.put("identities from rule",config.get("identities"));
  args.put("filename","ApprovalItemsData.csv");


  EmailOptions options = new EmailOptions(recipients, args);
  options.addAttachment(attatchment);
  options.setSendImmediate(true);
  options.setNoRetry(true);
  context.sendEmailNotification(emailTemplate, options);
  log.error("---email sent successfully----");

  return "ssssss";

  /* if (null == csvFile) {
    //log.error("-----Failed to create a temporary file to spool report data.");
  }
   for(int i=0;i<this.variables.length;i++){
     log.error("=========this.variables====="+this.variables[i]); 
  }
  log.error("=========config method 2====="+  Collections.singletonList(config));
    //log.error("=========config method 1====="+Arrays.asList(config));
     // log.error("------------columnName get(columnName)---------"+columnName);
                    // log.error("------------columnName valToWrite---------"+valToWrite);
                                        // log.error("--------data into bw check  1111111-----------successfull-----------------");

  */
  ]]></Source>
        

</Rule>
