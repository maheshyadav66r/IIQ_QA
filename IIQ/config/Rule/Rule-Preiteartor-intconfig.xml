<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="PreIteartor-IntConfig" significantModified="1747156216841" type="PreIterate">
          
    
    <Description>This rule is called before the connector processes the data in a file.</Description>
          
    
    <Signature returnType="void">
                    
        
        <Inputs>
                              
            
            <Argument name="log" type="org.apache.commons.logging.Log">
                                        
                
                <Description>
          The log object associated with the SailPointContext.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="context" type="sailpoint.api.SailPointContext">
                                        
                
                <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="application">
                                        
                
                <Description>
          Application being iterated.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="schema">
                                        
                
                <Description>
          Schema representing the data being iterated.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="stats">
                                        
                
                <Description>
          A map passed by the connector of the stats for the file about to be iterated.
          Contains keys:
          fileName : (String) filename of the file about to be processed
          absolutePath : (String) absolute filename
          length : (Long) length in bytes
          lastModified : (Long) last time the file was updated Java GMT
        </Description>
                                      
            
            </Argument>
                            
        
        </Inputs>
                  
    
    </Signature>
          
    
    <Source><![CDATA[
  import java.io.*;
  import sailpoint.tools.Util;
  import java.io.IOException;

  
  if("account".equalsIgnoreCase(schema.getNativeObjectType())){
  
  //Fetch group file path from application object and account file paths from stats argument
  String groupFile =application.getAttributes().get("group.file");

  String accountFile =stats.get("absolutePath");

  // 1: Read group file and store EmployeeId -> GroupIds mapping
  Map groupMap = new HashMap();
  
  
  try  {
    BufferedReader br = new BufferedReader(new FileReader(groupFile));

    br.readLine();  // Skip header line

    String line;

    while ((line = br.readLine()) != null) {

      String[] parts = line.split(",");

      if(parts.length @gteq 2){

        String empId = parts[0].trim();

        String groupId = parts[1].trim();


        if(null!=empId @and null!=groupId){

          if (groupMap.containsKey(empId)) {

            groupMap.put(empId, groupMap.get(empId) + "," + groupId);

          } else {

            groupMap.put(empId, groupId);

          }
        }
      }
    }

  } catch (IOException e) {

    log.error("Exception in reading groupFile--" + e.toString());
  }

  // 2: Read account file, update data and write back to string

  String finallines="";

  String header = "";

  String line = "";

  BufferedReader br = new BufferedReader(new FileReader(accountFile));

  header = br.readLine();  //skip header line from users file

  finallines=header+","+"GroupId"+"\n";      //add column GroupId to the users file data

  while ((line = br.readLine()) != null) {

    String[] parts = line.split(",");

    String epmId = parts[0].trim();

    String groupIdValues = groupMap.containsKey(epmId) ? groupMap.get(epmId) : "";

    finallines=finallines+(line+ ","+"\"" + groupIdValues + "\""+"\n");

  }

  log.error("\n finallines after  loop---"+finallines);

  //3.Convert the updated data into BufferedInputStream since Pre-iterator returns BufferedInputStream

  BufferedInputStream  bis=new BufferedInputStream( new ByteArrayInputStream(finallines.getBytes()));

  //log.error("file successfully updated");

  return bis ;
 }
  ]]></Source>
        

</Rule>
