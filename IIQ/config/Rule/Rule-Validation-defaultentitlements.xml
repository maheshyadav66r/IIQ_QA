<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Validation-DefaultEntitlements" significantModified="1721968302671" type="Validation">
          
    
    <Source><![CDATA[
  import sailpoint.object.Identity;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.Link;
  import sailpoint.object.EntitlementGroup;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.AttributeAssignment;
  import java.text.SimpleDateFormat;
  import java.util.Date;
  import java.util.Calendar;
  import sailpoint.tools.Util;

  Identity identity=context.getObjectByName(Identity.class,"Muthaih Muralidharan");
  String joiningDate=identity.getStringAttribute("joiningDate");
  log.error("-----fetching startDate ----------------"+startDate);

  SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
  Date jod=sdf.parse(joiningDate);
  log.error("----- jod ----------------"+jod);

  Calendar calendar = Calendar.getInstance();
  calendar.setTime(jod);
  calendar.add(Calendar.DAY_OF_YEAR, -15);
  Date startDate = calendar.getTime();
  log.error("-----  startDate----------------"+startDate);

  Date currentDate=new Date();
  boolean currentDateCheck=Util.isDateBetween(currentDate,startDate,jod);
  log.error("-----  startDate--:"+startDate+"--currentDate--:"+currentDate+"--jod--:"+jod);
  return currentDateCheck;




































  ProvisioningPlan plan=new ProvisioningPlan();
  plan.setIdentity(identity);

  Object obj=identity.getPreference("attributeAssignments");
  log.error("------------obj-----------------"+obj);


  List linksList=identity.getLinks();
  log.error("--------------linksList-------------------"+linksList);
  for(Link link:linksList)
  {
    log.error("---------------link----------------"+link);
    log.error("---link.getApplication().isAuthoritative()-----------"+link.getApplication().isAuthoritative());
    if(link.getApplication().isAuthoritative()==false)
    {
      AccountRequest accReq=new AccountRequest();
      accReq.setApplication(link.getApplicationName());
      accReq.setNativeIdentity(link.getNativeIdentity());
      accReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
      if(obj instanceof List)
      {
        for(AttributeAssignment attAsgmnt:obj)
        {
          if(link.getApplicationName().equals(attAsgmnt.getApplicationName()))
          {
            AttributeRequest attributeRequest=new AttributeRequest(attAsgmnt.getName(),ProvisioningPlan.Operation.Remove,attAsgmnt.getValue());
            attributeRequest.put("assignment","true");

            accReq.add(attributeRequest);
          }
        }
      }
      log.error("--------------------AccountRequest-----------------------------"+accReq.toXml());
      plan.add(accReq);
    }
  }
  log.error("  final plan print-----"+plan.toXml());
  return plan;

  /* import sailpoint.object.Identity;
  import sailpoint.object.*;
  import sailpoint.object.Link;
  import sailpoint.object.EntitlementGroup;
  import sailpoint.object.Attributes;
  import sailpoint.object.Application;
  import java.util.HashMap;

  Map internalMap=new HashMap();
  Map externalMap=new HashMap();

  Identity identity=context.getObjectByName(Identity.class,"Muthaih Muralidharan");
  log.error("--------------identity-------------------"+identity);
  List links=identity.getLinks();
  log.error("--------------links-------------------"+links);
  List listOfEntitlementGroup=identity.getExceptions();
  log.error("--------------listOfEntitlementGroup-------------------"+listOfEntitlementGroup);
  for(EntitlementGroup entitlementGroup : listOfEntitlementGroup)
  {
    String applicationName=entitlementGroup.getApplicationName();
    log.error("--------------applicationName-------------------"+applicationName);
    Attributes attributes=entitlementGroup.getAttributes();
    log.error("--------------attributes-------------------"+attributes);
    Map map=attributes.getMap();
    List keys =attributes.getKeys();
    for (String key:keys)
    {
      System.out.println("Keys:"+key);
      internalMap.put(applicationName,key);
      log.error("=====================internalMap======================"+internalMap);
      List values =  attributes.getList(key);
      /*for (String value:values)
      {
        System.out.println("Value :"+value);
      }*/
  /*externalMap.put(internalMap,values);
      log.error("=====================externalMap======================"+externalMap);

    }

    log.error("================================================================================================");

    log.error(externalMap.get("LDAPApplication=groups"));
    log.error(externalMap.get("LDAPApplication=groups, ActiveDirectory=memberOf"));
    log.error("================================================================================================");

  }




    Link links=identity.getLinks();
        List listOfEntitlementGroup=identity.getExceptions();
        for(EntitlementGroup entitlementGroup : listOfEntitlementGroup)
        {
					String applicationName=entitlementGroup.getApplicationName();
        	Attributes attributes=entitlementGroup.getAttributes();
        	Map map=attributes.getMap();
        	log.error(map);
        }*/


  ]]></Source>
        

</Rule>
