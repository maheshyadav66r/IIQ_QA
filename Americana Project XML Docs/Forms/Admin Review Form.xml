<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Form name="Admin Review Form" type="Workflow">
  <Attributes>
    <Map>
      <entry key="pageTitle" value="Admin Review Form" />
    </Map>
  </Attributes>
  <Section columns="2" label="Details to be provided by Admin">
    <Field columnSpan="1" displayName="Select the Region" displayType="combobox" name="selectRegion" postBack="true" required="true" type="string">
      <AllowedValuesDefinition>
        <Script>
          <Source>
            import org.apache.log4j.Logger;            
            import java.util.ArrayList;            
            import java.util.List;            
            import sailpoint.object.Custom;
            Custom reg=null;
            List Regionlist=new ArrayList();         
              try{
                  reg=context.getObjectByName(Custom.class,"Americana-Account-Attributes");
                  if(reg != null){
                  	Regionlist = reg.getList("Region");
					        }                                 
                  return Regionlist;
              		}catch(Exception e){
                throw e;
              }             
          </Source>
        </Script>
      </AllowedValuesDefinition>
    </Field>
    <Field columnSpan="1" displayName="Assign the Group" displayType="combobox" dynamic="true" multi="true" name="domainGroup" postBack="true" required="true" type="string">
      <AllowedValuesDefinition>
        <Script>
          <Source>
            			import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import sailpoint.object.ManagedAttribute;
import sailpoint.object.Application;
import sailpoint.object.Filter;
import sailpoint.object.Filter.MatchMode.*;
import sailpoint.object.QueryOptions;
import sailpoint.tools.Util;




List groupsList=new ArrayList();
String baseOu = "OU=Americana Office,DC=Americana,DC=global";
String applicationName = "Active Directory";
Application adApplication = context.getObjectByName(Application.class,applicationName);
String attributeName = "memberOf";
Filter baseFilter = Filter.and(Filter.eq("application",adApplication),Filter.eq("attribute",attributeName));
Filter regionFilter = null;
if(null != selectRegion @and !"".equalsIgnoreCase(selectRegion)){
	switch(selectRegion){
		case "United Arab Emirates":String regionOU = "OU=UAE-Office,"+baseOu;
									regionFilter = Filter.like("value",regionOU,Filter.MatchMode.END);
									break;
		case "King of Saudi Arabia":String regionOU = "OU=KSA-Office,"+baseOu;
									regionFilter = Filter.like("value",regionOU,Filter.MatchMode.END);
									break;
		case "Kuwait"			   :String regionOU = "OU=Kuwait,"+baseOu;
									regionFilter = Filter.like("value",regionOU,Filter.MatchMode.END);
									break;
		case "Egypt"			   :String regionOU = "OU=Egypt Office,"+baseOu;
									regionFilter = Filter.like("value",regionOU,Filter.MatchMode.END);
									break;	
		case "global"			   :String regionOU = baseOu;
									regionFilter = Filter.like("value",regionOU,Filter.MatchMode.END);	
									break;									
		default                    :String regionOU = "OU="+selectRegion+"-Office,"+baseOu;
									regionFilter = Filter.like("value",regionOU,Filter.MatchMode.END);
	}
	
	if(null != regionFilter){
			Filter finalFilter = Filter.and(baseFilter,regionFilter);
	
	QueryOptions qo = new QueryOptions();
    qo.setCloneResults(true);
    qo.addFilter(finalFilter);
    Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
    while(iterator.hasNext()){
		Object[] objectArray = iterator.next();
        if(null != objectArray){
			String groupName = objectArray[0];
			if(null != groupName @and !"".equalsIgnoreCase(groupName)){
				groupsList.add(groupName);
			}
        }
    }
	Util.flushIterator(iterator);
						
						if(null != groupsList @and groupsList.size() &gt; 0){
							return groupsList;
						}
						
						
	
}
	
	}
return groupsList;   
          </Source>
        </Script>
      </AllowedValuesDefinition>
    </Field>
    <Field columnSpan="1" displayName="Assign the Azure AD License" displayType="combobox" dynamic="true" name="azureADLicenses" postBack="true" required="true" type="string">
      <AllowedValuesDefinition>
        <Script>
          <Source>
           import java.util.List;
            import java.util.ArrayList;
            import sailpoint.object.Custom;
            
            List licensesList = new ArrayList();
            Custom customObject = context.getObjectByName(Custom.class,"Americana-Account-Attributes");
            if(null != customObject){
            	licensesList = customObject.get("LicensesListForAdminForm");
            }
            
            return licensesList;
            
          </Source>
        </Script>
      </AllowedValuesDefinition>
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                             import sailpoint.tools.Util;
                  if(null == assignAzureLicenses || (null != assignAzureLicenses @and !assignAzureLicenses)){
                            return true;
                            }else{
                            return false;
                            }      
                
              </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
    </Field>
  </Section>
  <Section columns="3" label="Details provided by User for Admin Review">
    <Field columnSpan="1" displayName="Selected Account" name="selectingAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;
								String selectingAccount = form.getField("selectingAccount").getValue();                           
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>                
          return selectingAccount;
          </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Selected User Type" name="userSelection" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String selectingAccount = form.getField("selectingAccount").getValue();
                 if(Util.isNullOrEmpty(selectingAccount) || selectingAccount.contains("Service Account")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return userSelection;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Selected User Type" name="userSelectionforServiceAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String selectingAccount = form.getField("selectingAccount").getValue();
                 if(Util.isNullOrEmpty(selectingAccount) || selectingAccount.contains("Domain Account")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return userSelectionforServiceAccount;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Region" name="newuserRegion" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return newuserRegion;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Region" name="servicenewuserRegion" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;
                String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicenewuserRegion;
        </Source>
      </Script>
    </Field>
  </Section>
  <Section columns="2">
    <Field columnSpan="1" displayName="Selected Account Type" name="genericAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return genericAccount;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Requested Account Name" name="preferredAccountName" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;
				String genericAccount = form.getField("genericAccount").getValue();	
				if(Util.isNullOrEmpty(genericAccount) || genericAccount.contains("Named")){  
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return preferredAccountName;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Named Account that will be created :" name="namedAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;                                                                    
				String genericAccount = form.getField("genericAccount").getValue();	
				if(Util.isNullOrEmpty(genericAccount) || genericAccount.contains("Generic")){  
                return true ;				 
					}                
                      else{      
                        return false;
                        }	
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return namedAccount;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Selected Account Type" name="servicegenericAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicegenericAccount;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Requested Account Name" name="servicepreferredAccountName" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;
                String servicegenericAccount = form.getField("servicegenericAccount").getValue();	
                if(Util.isNullOrEmpty(servicegenericAccount) || servicegenericAccount.contains("Named")){   
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicepreferredAccountName;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Named Account that will be created :" name="servicenamedAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;                                                                    
				String servicegenericAccount = form.getField("servicegenericAccount").getValue();	
				if(Util.isNullOrEmpty(servicegenericAccount) || servicegenericAccount.contains("Generic")){  
                 return true ;				 
				 				}                
                      else{      
                        return false;
                        }	
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicenamedAccount;
        </Source>
      </Script>
    </Field>
  </Section>
  <Section columns="3">
    <Field columnSpan="1" displayName="Temporary Account" name="tempAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                 import sailpoint.tools.Util;
                 String userSelection = form.getField("userSelection").getValue();				         			 
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }                  
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return tempAccount;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Start Date" name="startDate" postBack="true" readOnly="true" type="date">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                    import sailpoint.tools.Util;    
			    			String tempAccount = form.getField("tempAccount").getValue();		
                if(tempAccount == null){ 
                 return true ;
                  }
                 else{
                 return false;
                  }                   
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return startDate;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="End Date" name="endDate" postBack="true" readOnly="true" type="date">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                    import sailpoint.tools.Util;    
			    String tempAccount = form.getField("tempAccount").getValue();				     
                if(tempAccount == null){   
                 return true ;
                  }
                 else{
                        return false;
                        }                   
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return endDate;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Temporary Account" name="tempServiceAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                 import sailpoint.tools.Util;
                 String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();				         			 
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }                  
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return tempServiceAccount;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Start Date" name="startDateService" postBack="true" readOnly="true" type="date">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                    import sailpoint.tools.Util;    
			   					 String tempServiceAccount = form.getField("tempServiceAccount").getValue();				     
                if(tempServiceAccount == null){   
                 return true ;
                  }
                 else{
                        return false;
                        }                   
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return startDateService;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="End Date" name="endDateService" postBack="true" readOnly="true" type="date">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                    import sailpoint.tools.Util;    
			    String tempServiceAccount = form.getField("tempServiceAccount").getValue();				     
                if(tempServiceAccount == null){   
                 return true ;
                  }
                 else{
                        return false;
                        }                   
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return endDateService;
        </Source>
      </Script>
    </Field>
  </Section>
  <Section columns="3">
    <Field columnSpan="1" displayName="Requester EMail ID" name="requesterEmailId" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();                  
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return requesterEmailId;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Existing Admin Account" name="exestingAdminAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                 import sailpoint.tools.Util;                       
                 String userSelection = form.getField("userSelection").getValue();                  
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("New User")){                  
                  return true ;
                  }
                      else{                       
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return exestingAdminAccount;       
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Selected Servers for Access" name="requestforServerAccess" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return requestforServerAccess;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Department and Team" name="deptnTeam" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return deptnTeam;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Justification Provided for Access" displayType="textarea" name="justificationforAccess" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return justificationforAccess;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Server Region" name="region" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return region;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="First Name of the Requester" name="requesterFirstName" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;                        
                  String userSelection = form.getField("userSelection").getValue();                  
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return requesterFirstName;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Last Name of the Requester" name="requesterlastName" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                 String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return requesterlastName;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Requester EMail ID" name="newUserrequesterEmailId" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
              if(Util.isNullOrEmpty(userSelection) ||  userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return newUserrequesterEmailId;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Selected Servers for Access" name="serverAccess" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return serverAccess;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Department and Team" name="newUserdeptnTeam" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;
                String userSelection = form.getField("userSelection").getValue();
                if(Util.isNullOrEmpty(userSelection) || userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return newUserdeptnTeam;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Kind of Privilege Requested" name="privilaged" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return privilaged;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Justification provided for Access" displayType="textarea" name="jstAccess" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelection = form.getField("userSelection").getValue();
                 if(Util.isNullOrEmpty(userSelection) || userSelection.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return jstAccess;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Requester EMail ID" name="servicerequesterEmailIdofExestinguser" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicerequesterEmailIdofExestinguser;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Existing Admin Account" name="serviceexestingAdminAccount" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                      }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return serviceexestingAdminAccount;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Selected Servers for Access" name="servicerequestforServerAccess" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicerequestforServerAccess;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Server Region" name="serviceregion" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;                        
                  String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return serviceregion;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Department and Team" name="servicedeptnTeam" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;
                String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicedeptnTeam;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Justification provided for Access" displayType="textarea" name="servicejustificationforAccess" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("New User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicejustificationforAccess;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="First Name of the Requester" name="servicerequesterFirstName" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicerequesterFirstName;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Last Name of the Requester" name="servicerequesterlastName" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicerequesterlastName;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Requester EMail ID" name="servicerequesterEmailId" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;                                 
                String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();                                                     
                if(Util.isNullOrEmpty(userSelectionforServiceAccount) ||  userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicerequesterEmailId;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Selected Servers for Access" name="serviceserverAccess" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                        import sailpoint.tools.Util;
                  String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                 if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return serviceserverAccess;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Department and Team" name="servicerequesterdeptnTeam" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;
                String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{                
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicerequesterdeptnTeam;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Kind of Privilege Requested" name="serviceprivilaged" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;
                String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{                
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return serviceprivilaged;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Justification provided for Access" displayType="textarea" name="servicejstAccess" postBack="true" readOnly="true" type="string">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                import sailpoint.tools.Util;
                String userSelectionforServiceAccount = form.getField("userSelectionforServiceAccount").getValue();
                if(Util.isNullOrEmpty(userSelectionforServiceAccount) || userSelectionforServiceAccount.contains("Existing User")){
                  return true ;
                  }
                      else{
                        return false;
                        }
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Source>
          return servicejstAccess;
        </Source>
      </Script>
    </Field>
  </Section>
  <Button action="next" label="Submit" />
  <Button action="back" label="Reject" value="Reject" />
  <Button action="cancel" label="Cancel" />
</Form>

</sailpoint>