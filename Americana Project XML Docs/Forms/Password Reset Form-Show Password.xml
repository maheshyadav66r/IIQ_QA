<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Form name="Password Reset Form-Show Password" type="Workflow">
  <Attributes>
    <Map>
      <entry key="pageTitle" value="Password Reset" />
    </Map>
  </Attributes>
  <Section>
    <Field columnSpan="2" displayName="New password" name="newpassword" postBack="true" readOnly="true" type="string">
      <Script>
        <Source>
		import sailpoint.object.ProvisioningPlan;

        import sailpoint.object.Identity;
        import java.util.List;

        import sailpoint.object.ProvisioningPlan.AccountRequest;

        import sailpoint.object.Application;

        import sailpoint.api.IdentityService;

        import sailpoint.object.Link;

        import sailpoint.object.*;

        import sailpoint.api.*;

        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.ProvisioningProject;
        import sailpoint.api.Provisioner;
        import sailpoint.api.PasswordGenerator;
          import sailpoint.object.PasswordPolicy;
          import sailpoint.object.Identity;


        log.error("inside build plan");
			
        String strApplicationName=null;
        String strAccountName=null;
				Identity identity = null;

        String identityName = (String)identityModel.get("user");
          
        if(null != identityName){
        	identity = context.getObjectByName(Identity.class,identityName);
        	if(null != identity){
          				List links = identity.getLinks();
          				if(null != links @and links.size() &gt; 0){
          					for(Link link: links){
          							if(null != link @and "Active Directory".equalsIgnoreCase(link.getApplicationName()) || "AD Contractors".equalsIgnoreCase(link.getApplicationName())){
														String sAMAccountNameFromLink = link.getAttribute("sAMAccountName");
        										if(void != identityModel.get("adAccount") @and null != identityModel.get("adAccount")){
          										if(sAMAccountNameFromLink.equals(identityModel.get("adAccount"))){
        											 strApplicationName =	link.getApplicationName();
        											 strAccountName =	link.getNativeIdentity();
        											 break;	
        											}
        										}
          							}
          					}
          				}
          			}
        }
          
          if(null == strAccountName || null != strAccountName @and "".equalsIgnoreCase(strAccountName)){
          		password = "No AD Account Exist for the user. Hence, Password Reset isn't successful";
          			field.setDisplayType("label");
          			field.setRequired(false);
          			field.setDisplayName(password);
          }

        
String password = null;  	
          PasswordPolicy policy = null;

          try{


          policy = context.getObjectByName(PasswordPolicy.class,"Americana-AD-PasswordPolicy");
          if(policy!=null){

          password = new PasswordGenerator(context).generatePassword(policy);
          if(password!=null){

          password=password.replaceAll("\\s", ""); 
          
          }
          }

          }catch(Exception e){

          }
        
        ProvisioningPlan plan = new ProvisioningPlan();

				plan.setIdentity(identity);

				if(strApplicationName!=null &amp;&amp; 
        (strApplicationName.equalsIgnoreCase("Active Directory") || strApplicationName.equalsIgnoreCase("AD Contractors"))){
        log.error("strApplicationName is:::"+strApplicationName);

        AccountRequest acc = new AccountRequest();
        acc.setOperation(AccountRequest.Operation.Modify);
        acc.setApplication(strApplicationName);
        acc.add(new AttributeRequest("*password*",password));
        acc.add(new AttributeRequest("pwdLastSet",true));
        acc.setNativeIdentity(strAccountName);


        plan.add(acc);

        }
        

        

        log.error(plan.toXml());
        Provisioner prov=new Provisioner(context); 
        prov.setNoLocking(true);
        prov.setOptimisticProvisioning(true);
        ProvisioningProject project = prov.compile(plan);
        log.error("provisioned inot ad");
        prov.execute(project);
          ProvisioningProject project = prov.getProject();
          if(null != project){
          	
          
          List projectPlans = project.getPlans();
          if(null != projectPlans){
          	ProvisioningPlan provisioningPlan = projectPlans.get(0);
          
          if(null != provisioningPlan){
          AccountRequest accountRequest = provisioningPlan.getAccountRequest(strApplicationName,null,strAccountName);
          if(null != accountRequest){		
          	ProvisioningResult provResult = accountRequest.getResult();
          	if(null != provResult){
          		String result = provResult.getStatus();
          		if(null != result @and "committed".equalsIgnoreCase(result)){
          			password = "The password reset was sucessful, the password for "+identityModel.get("adAccount")+" is "+password;
          			field.setDisplayType("label");
          			field.setRequired(false);
          			field.setDisplayName(password);
          		}else{
          			field.setDisplayType("label");
          			field.setRequired(false);
          			field.setDisplayName("The request failed for the user please retry again");
          			field.setValue("");
          		}
          		}else{
          			field.setDisplayType("label");
          			field.setRequired(false);
          			field.setDisplayName("The request failed for the user please retry again");
          			field.setValue("");
          		}
          	}else{
          			field.setDisplayType("label");
          			field.setRequired(false);
          			field.setDisplayName("The request failed for the user please retry again");
          			field.setValue("");
          	}
          	}
         	}
          }
          
          
          return password;
		</Source>
      </Script>
    </Field>
  </Section>
  <Section type="datatable">
    <Field>
      <Attributes>
        <Map>
          <entry key="contentIsEscaped" value="true" />
        </Map>
      </Attributes>
      <Script>
        <Source>
          import sailpoint.object.Identity;
          
          if(null != form.getField("newpassword") @and  null != form.getField("newpassword").getDisplayName()){
          	String displayName = form.getField("newpassword").getDisplayName();
          	if(displayName.startsWith("The password reset was sucessful")){
          		String identityName = (String)identityModel.get("user");
          		Identity identityObj = context.getObjectByName(Identity.class,identityName);
          		if(null != identityObj){
          			String mobile = identityObj.getStringAttribute("mobile");
          			if(null != mobile @and !"".equalsIgnoreCase(mobile)){
          String smsKeyWord = "Once you click on the complete, a SMS with the password would be sent to the user's mobile: "+mobile;
          				return "&lt;p style=\"color:green;\"&gt;"+smsKeyWord+"&lt;/p&gt;";
          			}else{
          				return "&lt;p style=\"color:red;\"&gt;Couldn't send a SMS with new password.&lt;/p&gt;";
          			}
          		}
          	}
          }
         	return;
        </Source>
      </Script>
    </Field>
  </Section>
  <Button action="next" label="Complete" />
</Form>

</sailpoint>