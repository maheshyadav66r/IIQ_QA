<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Form name="Americana_BPM_Creation-Form" type="Workflow">
  <Attributes>
    <Map>
      <entry key="pageTitle" value="Americana_BPM_Creation-Form" />
      <entry key="subtitle" value="Use the below form to create or update a BPM account" />
      <entry key="title" value="Provision Access For BPM" />
    </Map>
  </Attributes>
  <Section label="Choose User" name="Manager Requesting Access">
    <Field displayName="Request Access For" dynamic="true" name="identityName" postBack="true" required="true" type="sailpoint.object.Identity">
      <Script>
        <Source>import sailpoint.object.Identity;
          
        	
          if(null !=launcher){
						Identity launcherIdentity = context.getObjectByName(Identity.class,launcher);
						if(null != launcherIdentity @and launcherIdentity.getManagerStatus()){
                field.setFilterString("name == \""+launcherIdentity.getName()+"\" || manager.name == \""+launcherIdentity.getName()+"\"");
              }else{
                field.setFilterString("name == \""+launcherIdentity.getName()+"\"");
               // field.setReadOnly(true);
                field.setValue(launcherIdentity.getName());
              }
						}
										 
					return field.getValue();
        </Source>
      </Script>
    </Field>
  </Section>
  <Section columns="2" label="User Details" name="User Details" type="datatable">
    <Attributes>
      <Map>
        <entry key="hidden">
          <value>
            <Script>
              <Source>if(null != identityName @and !"".equalsIgnoreCase(identityName)){
return false;
}else{
return true;
}</Source>
            </Script>
          </value>
        </entry>
        <entry key="subtitle" value="Below are the basic details of the user" />
      </Map>
    </Attributes>
    <Field columnSpan="1" displayName="First Name" dynamic="true" name="firstname" type="string">
      <Script>
        <Source>
        	import sailpoint.object.Identity;
          
          if(null != identityName @and !"".equalsIgnoreCase(identityName)){
						Identity identity = context.getObjectByName(Identity.class, identityName);   
						if(null != identity @and null != identity.getFirstname()){
          		return identity.getFirstname();
          	}          
						return "";
					}
          
          return ;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Last name" dynamic="true" name="lastname" type="string">
      <Script>
        <Source>
        	import sailpoint.object.Identity;
          
          if(null != identityName @and !"".equalsIgnoreCase(identityName)){
						Identity identity = context.getObjectByName(Identity.class, identityName);   
						if(null != identity @and null != identity.getLastname()){
          		return identity.getLastname();
          	}          
						return "";
					}
          
          return ;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Display Name" dynamic="true" name="displayName" type="string">
      <Script>
        <Source>
        	import sailpoint.object.Identity;
         if(null != identityName @and !"".equalsIgnoreCase(identityName)){
						Identity identity= context.getObjectByName(Identity.class, identityName);   
						if(null != identity @and null != identity.getDisplayName()){
          		return identity.getDisplayName();
          	}          
						return "";
					}
          return ;
        </Source>
      </Script>
    </Field>
    <Field columnSpan="1" displayName="Email" dynamic="true" name="email" type="string">
      <Script>
        <Source>
        	import sailpoint.object.Identity;
          
          if(null != identityName @and !"".equalsIgnoreCase(identityName)){
						Identity identity= context.getObjectByName(Identity.class, identityName);   
						if(null != identity @and null != identity.getEmail()){
          		return identity.getEmail();
          	}          
						return "";
					}
          
          
          return ;
        </Source>
      </Script>
    </Field>
  </Section>
  <Section label="Existing Access" name="Existing Access">
    <Attributes>
      <Map>
        <entry key="hidden">
          <value>
            <Script>
              <Source>
           
          
          import sailpoint.object.Identity;
          import sailpoint.object.Link;
          import sailpoint.object.Filter;
          import java.util.List;
                import sailpoint.object.Application;
                  import sailpoint.object.QueryOptions;
                  import sailpoint.object.filter;
                  import java.util.Iterator;
                import java.util.ArrayList;
                import sailpoint.object.ManagedAttribute;
                
          
                
          boolean hidden = true;
          
          if(null != identityName @and !"".equalsIgnoreCase(identityName)){
            Identity identity= context.getObjectByName(Identity.class, identityName);
            if(null != identity){
                List amDisplayList = new ArrayList();
            	List linksList = identity.getLinks();
          			if(null != linksList @and linksList.size() &gt; 0){
          				for(Link linkObject : linksList){
          					if(null != linkObject @and "Oracle BPM IDCS".equalsIgnoreCase(linkObject.getApplicationName())){
          						Object groupObject = linkObject.getAttribute("Group");		
          						if(null != groupObject){
                				Filter maFilter = Filter.and(Filter.in("value",groupObject),Filter.eq("application.name","Oracle BPM IDCS"),Filter.like("displayName","AM-P",Filter.MatchMode.START));
                  					QueryOptions qo = new QueryOptions();
                  					qo.setCloneResults(true);
                  					qo.addFilter(maFilter);
                  					Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
                  					while(iterator.hasNext()){
                  						Object[] displayNameArray = iterator.next();
                							String displayName = displayNameArray[0];
            									if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            										if(displayName.contains(" ")){
            											int index = displayName.indexOf(" ");
            											String newDisplayName = displayName.substring(0,index);
            											if(null != newDisplayName @and newDisplayName.length() == 8){
            												amDisplayList.add(displayNameArray[0]);
            											}
            									}else{
            										if(null != displayNameArray[0] @and displayNameArray[0].length() == 8){
            											amDisplayList.add(displayNameArray[0]);
            										}
            									}
            									}
                						}
                  
                 
                  					if(null != amDisplayList @and amDisplayList.size() &gt; 0){
                  						hidden = false;
                  						break;
                  					}
                			}
          					}
          				}
          			}  	  
            	}    
          }
          return hidden;
              
              
            </Source>
            </Script>
          </value>
        </entry>
      </Map>
    </Attributes>
    <Field displayName="Existing Access" dynamic="true" multi="true" name="existingAccesses" readOnly="true" type="ManagedAttribute">
      <Script>
        <Source>
        	import sailpoint.object.Identity;
              import sailpoint.object.Link;
              import sailpoint.object.Filter;
          import sailpoint.api.SailPointContext;
          import sailpoint.object.QueryOptions;
          import sailpoint.object.ManagedAttribute;
          import java.util.List;
          import java.util.ArrayList;
          
            if(null != form.getField("identityName") @and null != form.getField("identityName").getValue()){
          Identity identity= context.getObjectByName(Identity.class, form.getField("identityName").getValue());
              if(null != identity){
          List amDisplayList = new ArrayList();
          List valuesList = new ArrayList();
          	List linksList = identity.getLinks();
          		if(null != linksList @and linksList.size() &gt; 0){
          			for(Link linkObject : linksList){
          				if(null != linkObject @and "Oracle BPM IDCS".equalsIgnoreCase(linkObject.getApplicationName())){
          					Object groupObject = linkObject.getAttribute("Group");	
          					if(null != groupObject){
          						Filter maFilter = Filter.and(Filter.in("value",groupObject),Filter.eq("application.name","Oracle BPM IDCS"),Filter.like("displayName","AM-P",Filter.MatchMode.START));
                  					QueryOptions qo = new QueryOptions();
                  					qo.setCloneResults(true);
                  					qo.addFilter(maFilter);
                  					Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName,value");
                  					while(iterator.hasNext()){
                  						Object[] displayNameArray = iterator.next();
          
          										String displayName = displayNameArray[0];
            									if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            										if(displayName.contains(" ")){
            											int index = displayName.indexOf(" ");
            											String newDisplayName = displayName.substring(0,index);
            											if(null != newDisplayName @and newDisplayName.length() == 8){
            												amDisplayList.add(displayNameArray[0]);
          													valuesList.add(displayNameArray[1]);
            											}
            									}else{
            										if(null != displayNameArray[0] @and displayNameArray[0].length() == 8){
            											amDisplayList.add(displayNameArray[0]);
          												valuesList.add(displayNameArray[1]);
            										}
            									}
            									}
          									}
                  
                  
                  					
          
          
            				if(null != valuesList @and valuesList.size() &gt; 0){
                  	field.setValue(valuesList);
                  						
                  					}
          break;
          					}
          					
          					
          				}
            
          			}
            	}
          }
          }
           
          return field.getValue();
        </Source>
      </Script>
    </Field>
  </Section>
  <Section columns="2" label="User Accesses" name="User Accesses">
    <Field columnSpan="2" displayName="Add Roles" displayType="combobox" dynamic="true" multi="true" name="addRoles" postBack="true" required="true">
      <AllowedValuesDefinition>
        <Script>
          <Source>
import sailpoint.object.Identity;
import sailpoint.object.Link;
import sailpoint.object.Filter;
import sailpoint.object.ManagedAttribute;
import sailpoint.api.IdentityService;
import sailpoint.object.Application;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import sailpoint.object.QueryOptions;
            
List managedAttributesList = new ArrayList();
            
if(null != form.getField("identityName") @and null != form.getField("identityName").getValue()){
	Identity identity = context.getObjectByName(Identity.class, form.getField("identityName").getValue());
    if(null != identity){
			if(null != form.getField("identityName") @and null != form.getField("identityName").getValue() @and null != form.getField("identityName").getPreviousValue()){
				if(!form.getField("identityName").getPreviousValue().equals(form.getField("identityName").getValue())){
					field.setValue("");
      	} 
    	}
            
			QueryOptions qo = new QueryOptions();
      qo.setCloneResults(true);
      qo.setOrderBy("displayName");
      qo.setFlushBeforeQuery(true);
      IdentityService identityService = new IdentityService(context);
      Application applicationObj = context.getObjectByName(Application.class,"Oracle BPM IDCS");
      List linksList =identityService.getLinks(identity,applicationObj);
      if(null != linksList @and linksList.size() &gt; 0){
				for(Link linkObject : linksList){
					if(null != linkObject @and "Oracle BPM IDCS".equalsIgnoreCase(linkObject.getApplicationName())){
					Object groupObject = linkObject.getAttribute("Group");
					if(null != groupObject){
						if(groupObject instanceof String){
							
							Filter valueFilter = Filter.ne("value",groupObject);
            Filter displayNameFilter = Filter.like("displayName","AM-P",Filter.MatchMode.START);
            
							Filter applicationFilter = Filter.eq("application.name","Oracle BPM IDCS");
							Filter andFilter = Filter.and(applicationFilter,valueFilter,displayNameFilter);
							qo.addFilter(andFilter);
							Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
							while(iterator.hasNext()){
								Object[] objectArray = iterator.next();
								if(null != objectArray){
            			String displayName = objectArray[0];
            			if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            				if(displayName.contains(" ")){
            					int index = displayName.indexOf(" ");
            					String newDisplayName = displayName.substring(0,index);
            					if(null != newDisplayName @and newDisplayName.length() == 8){
            						managedAttributesList.add(objectArray[0]);
            					}
            				}else{
            					if(null != objectArray[0] @and objectArray[0].length() == 8){
            						managedAttributesList.add(objectArray[0]);
            					}
            				}
            			}
									
								}
							}
							break;
						}else{
							
							Filter valueFilter = Filter.not(Filter.in("value",groupObject));
            Filter displayNameFilter = Filter.like("displayName","AM-P",Filter.MatchMode.START);
							Filter applicationFilter = Filter.eq("application.name","Oracle BPM IDCS");
            
							Filter andFilter = Filter.and(applicationFilter,valueFilter,displayNameFilter);
							qo.addFilter(andFilter);
							Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
							while(iterator.hasNext()){
								Object[] objectArray = iterator.next();
								if(null != objectArray){
									String displayName = objectArray[0];
            			if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            				if(displayName.contains(" ")){
            					int index = displayName.indexOf(" ");
            					String newDisplayName = displayName.substring(0,index);
            					if(null != newDisplayName @and newDisplayName.length() == 8){
            						managedAttributesList.add(objectArray[0]);
            					}
            				}else{
            					if(null != objectArray[0] @and objectArray[0].length() == 8){
            						managedAttributesList.add(objectArray[0]);
            					}
            				}
            			}
								}
							}
            break;
						}
            
					}else{
						Filter applicationFilter = Filter.eq("application.name","Oracle BPM IDCS");
            Filter displayNameFilter = Filter.like("displayName","AM-P",Filter.MatchMode.START);
            Filter andFilter = Filter.and(applicationFilter,displayNameFilter);
						qo.addFilter(andFilter);
						Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
						while(iterator.hasNext()){
							Object[] objectArray = iterator.next();
							if(null != objectArray){
           			String displayName = objectArray[0];
            			if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            				if(displayName.contains(" ")){
            					int index = displayName.indexOf(" ");
            					String newDisplayName = displayName.substring(0,index);
            					if(null != newDisplayName @and newDisplayName.length() == 8){
            						managedAttributesList.add(objectArray[0]);
            					}
            				}else{
            					if(null != objectArray[0] @and objectArray[0].length() == 8){
            						managedAttributesList.add(objectArray[0]);
            					}
            				}
            			}
							}
						}
            break;
					}
          		}
          	}
        }else{
					Filter applicationFilter = Filter.eq("application.name","Oracle BPM IDCS");
         	Filter displayNameFilter = Filter.like("displayName","AM-P",Filter.MatchMode.START);
            Filter andFilter = Filter.and(applicationFilter,displayNameFilter);
						qo.addFilter(andFilter);
          Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
          while(iterator.hasNext()){
						Object[] objectArray = iterator.next();
						if(null != objectArray){
							String displayName = objectArray[0];
            			if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            				if(displayName.contains(" ")){
            					int index = displayName.indexOf(" ");
            					String newDisplayName = displayName.substring(0,index);
            					if(null != newDisplayName @and newDisplayName.length() == 8){
            						managedAttributesList.add(objectArray[0]);
            					}
            				}else{
            					if(null != objectArray[0] @and objectArray[0].length() == 8){
            						managedAttributesList.add(objectArray[0]);
            					}
            				}
            			}
            }
          }		
         }
			}
    }
        return managedAttributesList;
       	</Source>
        </Script>
      </AllowedValuesDefinition>
      <Attributes>
        <Map>
          <entry key="contentIsEscaped" value="true" />
          <entry key="height" value="200" />
          <entry key="hidden">
            <value>
              <Script>
                <Source>
              		import sailpoint.object.Identity;
                  
                  boolean hidden = true;
                  
                  if(null != identityName){
                  	hidden = false;
                  }
                  return hidden;
                </Source>
              </Script>
            </value>
          </entry>
          <entry key="width" value="100" />
        </Map>
      </Attributes>
    </Field>
    <Field columnSpan="1" displayName="Do you want to remove roles?" name="isRemoveRoles" postBack="true" type="boolean">
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
              		import sailpoint.object.Identity;
                  import sailpoint.object.Link;
              		import sailpoint.object.Filter;
          				import sailpoint.object.ManagedAttribute;
              		import sailpoint.api.IdentityService;
                  import sailpoint.object.Application;
                  import sailpoint.object.QueryOptions;
                  import sailpoint.object.filter;
                  import java.util.Iterator;
                  
                  boolean hidden = true;
                  
                  if(null != identityName){
                  List amDisplayList = new ArrayList();
                  	Identity identity= context.getObjectByName(Identity.class, identityName);
                  if(null != identity){
          					IdentityService identityService = new IdentityService(context);
          					Application applicationObj = context.getObjectByName(Application.class,"Oracle BPM IDCS");
          					List linksList =identityService.getLinks(identity,applicationObj);
          					if(null != linksList @and linksList.size() &gt; 0){
                  		for(Link linkObject : linksList){
                  			if(null != linkObject){
                  				Object groupObject = linkObject.getAttribute("Group");
                  				if(null != groupObject){
                  					Filter maFilter = Filter.and(Filter.in("value",groupObject),Filter.eq("application.name","Oracle BPM IDCS"));
                  					QueryOptions qo = new QueryOptions();
                  					qo.setCloneResults(true);
                  					qo.addFilter(maFilter);
                  					Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
                  					while(iterator.hasNext()){
                  						Object[] displayNameArray = iterator.next();
                  						
                  						String displayName = displayNameArray[0];
            									if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            										if(displayName.contains(" ")){
            											int index = displayName.indexOf(" ");
            											String newDisplayName = displayName.substring(0,index);
            											if(null != newDisplayName @and newDisplayName.length() == 8){
            												amDisplayList.add(displayNameArray[0]);
            											}
            									}else{
            										if(null != displayNameArray[0] @and displayNameArray[0].length() == 8){
            											amDisplayList.add(displayNameArray[0]);
            										}
            									}
            									}
                  					}
                  
                  
                  					if(null != amDisplayList @and amDisplayList.size() &gt; 0){
                  						hidden = false;
                  						break;
                  					}
                  
                  
                  					
                  				}
                  			}
                  		}
          						
          					}
          				}
                  }
                  return hidden;
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
    </Field>
    <Field columnSpan="2" displayName="Remove Roles" displayType="combobox" dynamic="true" multi="true" name="removeRoles" postBack="true" required="true">
      <AllowedValuesDefinition>
        <Script>
          <Source>
            import sailpoint.api.IdentityService;
            import sailpoint.api.SailPointContext;
        		import sailpoint.object.Identity;
            import sailpoint.object.Link;
            import sailpoint.object.Filter;
          	import sailpoint.object.QueryOptions;
          	import sailpoint.object.ManagedAttribute;
          	import sailpoint.object.Application;
            
          
            import java.util.Iterator;
          	import java.util.List;
          	import java.util.ArrayList;
          	import sailpoint.object.QueryOptions;
            
              
          List managedAttributesList = new ArrayList();
           
          if(null != form.getField("identityName") @and null != form.getField("identityName").getValue()){
	Identity identity = context.getObjectByName(Identity.class, form.getField("identityName").getValue());
    if(null != identity){
			if(null != form.getField("identityName") @and null != form.getField("identityName").getValue() @and null != form.getField("identityName").getPreviousValue()){
				if(!form.getField("identityName").getPreviousValue().equals(form.getField("identityName").getValue())){
					field.setValue("");
      	} 
    	}
            
			QueryOptions qo = new QueryOptions();
      qo.setCloneResults(true);
      qo.setOrderBy("displayName");
      qo.setFlushBeforeQuery(true);
      IdentityService identityService = new IdentityService(context);
      Application applicationObj = context.getObjectByName(Application.class,"Oracle BPM IDCS");
      List linksList =identityService.getLinks(identity,applicationObj);
      if(null != linksList @and linksList.size() &gt; 0){
				for(Link linkObject : linksList){
					if(null != linkObject @and "Oracle BPM IDCS".equalsIgnoreCase(linkObject.getApplicationName())){
					Object groupObject = linkObject.getAttribute("Group");
					if(null != groupObject){
						if(groupObject instanceof String){
							
							Filter valueFilter = Filter.eq("value",groupObject);
            Filter displayNameFilter = Filter.like("displayName","AM-",Filter.MatchMode.START);
							Filter applicationFilter = Filter.eq("application.name","Oracle BPM IDCS");
							Filter andFilter = Filter.and(applicationFilter,valueFilter,displayNameFilter);
							qo.addFilter(andFilter);
							Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
							while(iterator.hasNext()){
								Object[] objectArray = iterator.next();
								if(null != objectArray){
            			String displayName = objectArray[0];
            									if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            										if(displayName.contains(" ")){
            											int index = displayName.indexOf(" ");
            											String newDisplayName = displayName.substring(0,index);
            											if(null != newDisplayName @and newDisplayName.length() == 8){
            												managedAttributesList.add(objectArray[0]);
            											}
            									}else{
            										if(null != objectArray[0] @and objectArray[0].length() == 8){
            											managedAttributesList.add(objectArray[0]);
            										}
            									}
            									}
            
									
								}
							}
							break;
						}else{
							
							Filter valueFilter = Filter.in("value",groupObject);
            Filter displayNameFilter = Filter.like("displayName","AM-P",Filter.MatchMode.START);
							Filter applicationFilter = Filter.eq("application.name","Oracle BPM IDCS");
							Filter andFilter = Filter.and(applicationFilter,valueFilter,displayNameFilter);
							qo.addFilter(andFilter);
							Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
							while(iterator.hasNext()){
								Object[] objectArray = iterator.next();
								if(null != objectArray){
									String displayName = objectArray[0];
            									if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            										if(displayName.contains(" ")){
            											int index = displayName.indexOf(" ");
            											String newDisplayName = displayName.substring(0,index);
            											if(null != newDisplayName @and newDisplayName.length() == 8){
            												managedAttributesList.add(objectArray[0]);
            											}
            									}else{
            										if(null != objectArray[0] @and objectArray[0].length() == 8){
            											managedAttributesList.add(objectArray[0]);
            										}
            									}
            									}
								}
							}
            break;
						}
            
					}
          		}
          	}
        }
			}
    }  
          
         return managedAttributesList;
        </Source>
        </Script>
      </AllowedValuesDefinition>
      <Attributes>
        <Map>
          <entry key="hidden">
            <value>
              <Script>
                <Source>
                	boolean hidden = true;
                  
                  import sailpoint.object.Identity;
              		import sailpoint.object.Link;
              		import sailpoint.object.Filter;
          				import sailpoint.object.ManagedAttribute;
              		import sailpoint.api.IdentityService;
                  import sailpoint.object.Application;
                  import sailpoint.object.QueryOptions;
                  import sailpoint.object.Filter;
                  import java.util.Iterator;
                  import java.util.List;
                  import java.util.ArrayList;
          
          				if(null != identityName @and null != isRemoveRoles @and isRemoveRoles){
                  Identity identity= context.getObjectByName(Identity.class, identityName);
                  if(null != identity){
                  List amDisplayList = new ArrayList();
          					IdentityService identityService = new IdentityService(context);
          					Application applicationObj = context.getObjectByName(Application.class,"Oracle BPM IDCS");
          					List linksList =identityService.getLinks(identity,applicationObj);
          					if(null != linksList @and linksList.size() &gt; 0){
                  		for(Link linkObject : linksList){
                  			if(null != linkObject){
                  				Object groupObject = linkObject.getAttribute("Group");
                  				if(null != groupObject){
                  			Filter maFilter = Filter.and(Filter.in("value",groupObject),Filter.eq("application.name","Oracle BPM IDCS"));
                  					QueryOptions qo = new QueryOptions();
                  					qo.setCloneResults(true);
                  					qo.addFilter(maFilter);
                  					Iterator iterator = context.search(ManagedAttribute.class,qo,"displayName");
                  					while(iterator.hasNext()){
                  						Object[] displayNameArray = iterator.next();
                  						
                  						String displayName = displayNameArray[0];
            									if(null != displayName @and !"".equalsIgnoreCase(displayName)){
            										if(displayName.contains(" ")){
            											int index = displayName.indexOf(" ");
            											String newDisplayName = displayName.substring(0,index);
            											if(null != newDisplayName @and newDisplayName.length() == 8){
            												amDisplayList.add(displayNameArray[0]);
            											}
            									}else{
            										if(null != displayNameArray[0] @and displayNameArray[0].length() == 8){
            											amDisplayList.add(displayNameArray[0]);
            										}
            									}
            									}
                  					}
                  
                  
                  					if(null != amDisplayList @and amDisplayList.size() &gt; 0){
                  						hidden = false;
                  						break;
                  					}
                  				}
                  			}
                  		}
          						
          					}
          				}
                  }
                  
                  
          
          return hidden;
                </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
    </Field>
    <Field dynamic="true" hidden="true" name="approversList" postBack="true">
      <Script>
        <Includes>
          <Reference class="sailpoint.object.Rule" name="Americana-BPM Custom-RuleLibrary" />
        </Includes>
        <Source>
          import java.util.Map;
          import java.util.HashMap;
          import sailpoint.object.Identity;
          
          
          List approvalsList = new ArrayList();
          if(null != identityName){
        	if(null != identityName @and null != launcher @and !"".equals(identityName) @and !"".equals(launcher)){
						
						approvalsList.clear();
          	Map approvalMapITHead = null;
          	Map managerApprovalMap = null;
          		Identity launcherCube = context.getObjectByName(Identity.class,launcher);
          		if(null != launcherCube @and null != launcherCube.getManager()){
          			managerApprovalMap = getApprovalMap("1st Level Approval (Line Manager)", launcherCube.getManager().getName(), "Pending");
          		}
          	 
          	if(null != ITHeadApprover){
          		approvalMapITHead = getApprovalMap("2nd Level Approval (Application Owner)", ITHeadApprover, "Pending");
          	}
          	if(null != managerApprovalMap @and managerApprovalMap.size() &gt; 0 @and null != approvalMapITHead @and approvalMapITHead.size() &gt; 0){
          		approvalsList.add(managerApprovalMap);
          		approvalsList.add(approvalMapITHead);
          	}
          }
          }
          return approvalsList;
          
        </Source>
      </Script>
    </Field>
  </Section>
  <Section label="Approval Matrix" name="Approval Status" type="datatable">
    <Field dynamic="true" helpKey="Please find Approval Status">
      <Attributes>
        <Map>
          <entry key="contentIsEscaped" value="true" />
          <entry key="hidden">
            <value>
              <Script>
                <Source>
              	if(null != identityName){
                	return false;
                }else{
                	return true;
                }
              </Source>
              </Script>
            </value>
          </entry>
        </Map>
      </Attributes>
      <Script>
        <Includes>
          <Reference class="sailpoint.object.Rule" name="Americana-BPM Custom-RuleLibrary" />
        </Includes>
        <Source>
          import java.util.Map;
          import java.util.HashMap;
          import sailpoint.object.Identity;
          
          String table = "";
          
          if(null != form.getField("approversList") @and null != form.getField("approversList").getValue()){
          	List dataList = form.getField("approversList").getValue();
          	Custom customObj = context.getObjectByName(Custom.class,"Americana-BPM Custom-Attributes");
          	if(null != dataList @and dataList.size() &gt; 0 @and null != customObj){
          		List tableHeaders = customObj.get("approvalTableHeaders");
          		if(null != tableHeaders @and tableHeaders.size() &gt; 0){
          			table = getFormTable(dataList,tableHeaders);
          		}
          	}
          }
          	
          return table;
        </Source>
      </Script>
    </Field>
  </Section>
  <Button action="next" label="Next" />
  <Button action="cancel" label="nav_cancel" />
</Form>

</sailpoint>