<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="PS_DetailsOf_Disabled_User">
  <Description>when users enddate is reached users are disabled and move to country specific ou, that ous are part of Active Directory. therefore all disbled users application changed from contractor ad to Active Directory. this rule is used to change a ac_ new parent and keep all contrctor users in contractr ad itself. Note : comment  sendigEmail(identity, emailTem,"Access Provisioning",identity.getEmail()); in Contrctor AD after provision rule to avoid the sending email to serviceDesk</Description>
  <Source>

    import org.apache.log4j.Logger;

    import java.io.File;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

  import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
  import sailpoint.object.Identity;
  import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.*;
        import java.lang.String;
        import sailpoint.api.Provisioner;
        import sailpoint.api.*;
        import sailpoint.object.ProvisioningProject;
		import sailpoint.object.*; 
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest; 
  import sailpoint.api.TaskManager; 
  import java.util.*;
  import sailpoint.object.ProvisioningPlan.AccountRequest; 
  import sailpoint.object.ProvisioningPlan.AttributeRequest; 
  import sailpoint.tools;
  import java.lang.*;
  import java.text.*;
import sailpoint.object.QueryInfo;
  import sailpoint.object.*;
  import sailpoint.connector.*;
  import sailpoint.connector.*;
  import sailpoint.api.*;
  import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

  String errormsg="";
String appname="AD Contractors";
String accountName="";
 
  String app="";
  String note="";
  String na="";
  String status="";
 
		List al=new ArrayList();

  Logger log = Logger.getLogger("customRule4");
  log.debug("provision to AD");

  List emails = new ArrayList();
  try {

      String filename = "C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\logs\\disabled4.csv";

    
Scanner sc = new Scanner(new File(filename));
sc.useDelimiter("\r\n");
while (sc.hasNext()) {
String username = (String) sc.next(); 
emails.add(username);
}
sc.close();
   
} catch (Exception e) {

      log.error("PS_SendReminderEmails: " + e.getMessage());
}
  

try {
    
for (Object obj1 : emails) {
String user = (String)obj1;

     //   log.debug("PS_SendReminderEmails: email/username: " + email);
Identity userid = context.getObjectByName(Identity.class, user);
  if(userid==null)
  {
   	al.add(user); 
  }
       
if (userid != null) {
  
  na=userid.getName();
  List links=userid.getLinks();
  for(Link link:links){
    
    if(link.getApplicationName().equalsIgnoreCase("AD Contractors")||link.getApplicationName().equalsIgnoreCase("Active Directory")){
      
     accountName= link.getAttribute("distinguishedName"); 
     app=link.getApplicationName();
      
      Boolean b=link.isDisabled();
      status=String.valueOf(b);
      note="\""+accountName+"\""+","+app+","+na+","+status;
       
						
						al.add(note);
  }
  }
  
}
}
  
  if (!al.isEmpty()&amp;&amp; al.size()&gt;0) {
       FileWriter writer = new FileWriter("C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\logs\\LeaverActive.csv", true);
        for (String info : al) {
            writer.write(info + "\n");
        }
        writer.close();
    } 
    
} catch (Exception e) {

      log.error("error message: " + e.getMessage());
}
 
       
      
          
</Source>
</Rule>

</sailpoint>