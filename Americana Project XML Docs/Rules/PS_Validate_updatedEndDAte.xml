<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="PS_Validate_updatedEndDAte">
  <Description>
    rule is run to check if the rule testProvision to AD worked as expected
  </Description>
  <Source>
       
    import org.apache.log4j.Logger;

    import java.io.File;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

  import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
  import sailpoint.object.Identity;
  import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.*;
        import java.lang.String;
        import sailpoint.api.Provisioner;
        import sailpoint.api.*;
        import sailpoint.object.ProvisioningProject;
		import sailpoint.object.*; import sailpoint.object.ProvisioningPlan.AttributeRequest; import sailpoint.object.ProvisioningPlan.AccountRequest; import sailpoint.api.TaskManager; import java.util.*; import sailpoint.object.ProvisioningPlan.AccountRequest; import sailpoint.object.ProvisioningPlan.AttributeRequest; import sailpoint.tools; import java.lang.*; import java.text.*; System.out.println("RunAggregation step");
import sailpoint.object.QueryInfo;
  import sailpoint.object.*;
  import sailpoint.connector.*;
  import sailpoint.connector.*;
  import sailpoint.api.*;

  String errormsg="";
String appname="AD Contractors";
String accountName="";
 
  List identitiesWithContractorAD = new ArrayList();
   
String info="";
  String identityName ="";
  String endDate ="";
  String accountExpires ="";
		

  Logger log = Logger.getLogger("customRule4");
  log.debug("provision to AD");

  List emails = new ArrayList();
  try {
//keep the user names in this file to get the endDate and accountExpiry to match
      String filename = "C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\logs\\provisionToAD.csv";

    
Scanner sc = new Scanner(new File(filename));
sc.useDelimiter("\r\n");
while (sc.hasNext()) {
String username = (String) sc.next(); 
emails.add(username);
}
sc.close();
   
} catch (Exception e) {

      log.error("PS_SendReminderEmails: " + e.getMessage());
}
  

try {
    
for (Object obj1 : emails) {
String user = (String)obj1;

        log.debug("PS_SendReminderEmails: email/username: " + email);
Identity userid = context.getObjectByName(Identity.class, user);
       
if (userid != null) {
 identityName =userid.getName();
  endDate=userid.getAttribute("endDate");
   accountExpires=userid.getAttribute("accountExpires");
info=identityName+","+endDate+","+accountExpires;
            identitiesWithContractorAD.add(info);
			
			
			

  }
  }
 
 if (!identitiesWithContractorAD.isEmpty()) {
       FileWriter writer = new FileWriter("C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\logs\\validationList.csv", true);
        for (String info : identitiesWithContractorAD) {
            writer.write(info + "\n");
        }
        writer.close();
    }

}
    
 catch (Exception e) {

      log.error("error message: " + e.getMessage());
}
       
</Source>
</Rule>

</sailpoint>