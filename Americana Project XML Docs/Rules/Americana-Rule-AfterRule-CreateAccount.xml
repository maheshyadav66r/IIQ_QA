<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="Americana-Rule-AfterRule-CreateAccount" type="WebServiceAfterOperationRule">
  <Description>The Web Services connector will call this rule after performing ANY defined operation. This rule can be used to update the parsed resource object and/or add persistent values to the application's data.
    (See information about what to return for more information)</Description>
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" name="Americana-RuleLibrary-Attribute" />
  </ReferencedRules>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>The application whose data file is being processed.</Description>
      </Argument>
      <Argument name="requestEndPoint">
        <Description>The current request information contain header, body ,response object</Description>
      </Argument>
      <Argument name="processedResponseObject">
        <Description>Response Object processed by the Web services connector</Description>
      </Argument>
      <Argument name="rawResponseObject">
        <Description>Response Object returned from the end system</Description>
      </Argument>
      <Argument name="restClient">
        <Description>REST Client Object</Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Map">
        <Description>A newly created map containing a 'data' key and optionally, a 'connectorStateMap' key.  The 'data' value should be set to a map containing a parsed list of accounts/groups.  
          The 'connectorStateMap' value can be set to a map containing values that will be persisted to the application definition.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import com.google.gson.Gson;
  import com.google.gson.JsonElement;
  import com.google.gson.JsonObject;
  import com.google.gson.JsonParser;
  import com.google.gson.JsonArray;

  import java.io.IOException;
  import java.io.InputStream;
  import java.net.HttpURLConnection;
  import java.net.URL;
  import java.util.Scanner;

  import sailpoint.tools.Util;

  import sailpoint.connector.webservices.EndPoint;
  import sailpoint.connector.webservices.WebServicesClient;

  import org.apache.log4j.Logger;
  import org.apache.log4j.Level;

  Logger logger = Logger.getLogger("rule.americana.AfterRule.OracleBPMIDCS");
  String ruleName = "Americana-Rule-AfterRule-CreateAccount";

  Map updatedMapInfo = new HashMap();
  try {

    if(null != rawResponseObject &amp;&amp; processedResponseObject != null) {
      Gson gson = new Gson();
      JsonParser jsonParser = new JsonParser();



      /*******************************************************************

                       Get User Group Call

	    *******************************************************************/

      for (Map iterateMap : processedResponseObject) {
        if (iterateMap != null &amp;&amp; !iterateMap.isEmpty()) {
          String id = iterateMap.get("id");
          String accessToken = getAccessToken();
          List groupsList = new ArrayList();
          if (Util.isNotNullOrEmpty(id) &amp;&amp; Util.isNotNullOrEmpty(accessToken) ) {

            String urlString = requestEndPoint.getFullUrl();

            urlString = urlString+"?attributes=groups.value";
            URL url = new URL(urlString);

            HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
            httpConn.setRequestMethod("GET");

            httpConn.setRequestProperty("Content-Type", "application/json");
            httpConn.setRequestProperty("Authorization", "Bearer "+accessToken);

            InputStream responseStream = httpConn.getResponseCode() / 100 == 2
              ? httpConn.getInputStream()
              : httpConn.getErrorStream();
            Scanner s = new Scanner(responseStream).useDelimiter("\\A");
            String response = s.hasNext() ? s.next() : "";
            if (Util.isNotNullOrEmpty(response) &amp;&amp; response.contains("groups")) {

              JsonObject jsonObject1 = jsonParser.parse(response).getAsJsonObject();

              JsonArray groupValues = jsonObject1.get("groups").getAsJsonArray();
              if (groupValues != null ) {

                for (JsonObject jo : groupValues) {

                  groupsList.add(jo.get("value").getAsString());

                }

              }
            }

          }
          if (Util.nullSafeSize(groupsList) &gt; 0) {
            iterateMap.put("Group",groupsList);
          }
        } //End if
      } //End for
    } //End if
  } catch (Exception e) {
    String exceptMsg = "Exception Occuredn IN [ "+ruleName+ " ]  ::: "+e.getMessage();
    logger.error(exceptMsg);
  }
  updatedMapInfo.put("data", processedResponseObject);
  if (logger.isTraceEnabled()) {
    logger.trace("====The processedResponseObject IN [ " +ruleName+ " ] " +processedResponseObject);
  }
  return updatedMapInfo;
  </Source>
</Rule>

</sailpoint>