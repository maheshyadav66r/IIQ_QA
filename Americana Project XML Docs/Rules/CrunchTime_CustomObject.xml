<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="CrunchTime_CustomObject">
  <Source>
  import com.jcraft.jsch.Channel;
  import com.jcraft.jsch.ChannelSftp;
  import com.jcraft.jsch.JSch;
  import com.jcraft.jsch.JSchException;
  import com.jcraft.jsch.Session;
  import com.jcraft.jsch.SftpException;


  import sailpoint.object.Identity;
  import sailpoint.object.Custom;
  import sailpoint.object.Attributes;
  import java.io.BufferedReader;
  import java.io.File;
  import java.io.FileReader;
  import sailpoint.tools.Util;

  JSch jsch = new JSch();
  Session session = null;
  try {
    session = jsch.getSession("amr_sftp_iam_intg_dev_user", "129.148.208.34", 5024);//user name, host, port
    session.setConfig("StrictHostKeyChecking", "no");
    session.setPassword("SftpIADU#49091");//password
    session.connect();

    Channel channel = session.openChannel("sftp");
    channel.connect();
    ChannelSftp sftpChannel = (ChannelSftp) channel;

    InputStream stream = sftpChannel.get("/home/users/amr_sftp_iam_intg_dev_user/IAM/Inbound/Location.csv");//file location
    try {
      Map marketField = new HashMap();
      Map dataMap = new HashMap();
      BufferedReader br = new BufferedReader(new InputStreamReader(stream));
      String data ="";
      boolean skip = true;

      while ((data = br.readLine()) != null) {

        if(skip){
          skip = false;
          continue;
        }

        String[] splitArray =   data.split(",");

        if(data == 0 || !"Y".equalsIgnoreCase(splitArray[5])){
          
          continue;
        }

        String COUNTRY_NAME = splitArray[0];
        String MARKET_NAME = splitArray[1];
        String CONCEPT_NAME = splitArray[2];
        String LOCATION_NAME = splitArray[4];
       
        String marketKey = LOCATION_NAME+"|"+CONCEPT_NAME+"|"+COUNTRY_NAME;
        marketField.put(marketKey,MARKET_NAME);
        Map countryMap = new HashMap();

        if(dataMap.containsKey(COUNTRY_NAME)){
          countryMap = (Map) dataMap.get(COUNTRY_NAME);
        }

        if(countryMap.containsKey(COUNTRY_NAME)){

          List valList = (List) countryMap.get(COUNTRY_NAME);
          if(!valList.contains(CONCEPT_NAME)){
            valList.add(CONCEPT_NAME);
            countryMap.put(COUNTRY_NAME, valList);
          }
        }
        else{
          List list1 = new ArrayList();
          list1.add(CONCEPT_NAME);
          
          countryMap.put(COUNTRY_NAME,list1);
        }


        if(countryMap.containsKey(CONCEPT_NAME)){

          List valList = (List) countryMap.get(CONCEPT_NAME);
          if(!valList.contains(LOCATION_NAME)){
            valList.add(LOCATION_NAME);
            countryMap.put(CONCEPT_NAME, valList);
          }
        }
        else{
          List list1 = new ArrayList();
          list1.add(LOCATION_NAME);
          
          countryMap.put(CONCEPT_NAME,list1);
        }

        dataMap.put(COUNTRY_NAME,countryMap);
      }
      

      Custom crunchtimeObj =	context.getObjectByName(Custom.class,"Custom_CrunchTime");

      if(crunchtimeObj == null){
        crunchtimeObj = new Custom();
        crunchtimeObj.setName("Custom_CrunchTime");
      }

      crunchtimeObj.setAttributes(new Attributes(dataMap));
      context.saveObject(crunchtimeObj);
      context.commitTransaction();
      
      //creating custom Object for marketField values 
      Custom crunchTimeObj =	context.getObjectByName(Custom.class,"CrunchTime_MarketField");

      if(crunchTimeObj == null){
        crunchTimeObj = new Custom();
        crunchTimeObj.setName("CrunchTime_MarketField");
      }

      crunchTimeObj.setAttributes(new Attributes(marketField));
      context.saveObject(crunchTimeObj);
      context.commitTransaction();
      
    }
    catch (IOException io) {
      System.out.println("Exception occurred during reading file from SFTP server due to " + io.getMessage());
      io.getMessage();

    } 
    catch (Exception e) {
      System.out.println("Exception occurred during reading file from SFTP server due to " + e.getMessage());
      e.getMessage();

    }

    sftpChannel.exit();
    session.disconnect();
  } catch (JSchException e) {
    e.printStackTrace();
  } catch (SftpException e) {
    e.printStackTrace();
  }

  </Source>
</Rule>

</sailpoint>