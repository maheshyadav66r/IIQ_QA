<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="Power BI Access Request Report" type="AllowedValues">
  <Description>This rule is configured on the application and is called after the connector has build a ResourceObject from the native application data.

Initially designed for non-rule based connectors to add SPPrivileged flag to an object, but could be used to do any transformations.</Description>
  <Signature returnType="ResourceObject">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="object">
        <Description>
          The ResourceObject built by the connector.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application that references the connector.
        </Description>
      </Argument>
      <Argument name="connector">
        <Description>
          The connector object.
        </Description>
      </Argument>
      <Argument name="state">
        <Description>
          A Map containing state information.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="resourceObject">
        <Description>
          The updated resource object.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.QueryOptions;
import sailpoint.object.WorkItem;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import org.joda.time.DateTime;  


public static void writeRow(BufferedWriter writer, String[] dataRow) throws IOException {
	StringBuilder csvRow = new StringBuilder();
  for (String cell : dataRow) {
    csvRow.append(cell).append(",");
  }
  csvRow.deleteCharAt(csvRow.length() - 1);
  csvRow.append("\n");
  writer.write(csvRow.toString());
}

String tskSuccess = "Failed";
Long time = new Date().getTime();
Date todayDate = new Date();  
SimpleDateFormat df = new SimpleDateFormat("M/dd/yy");
String reportDate = df.format(todayDate);
Date dateago = new DateTime(todayDate).minusDays(120).toDate();
String strDateago = df.format(dateago);
Date filterfromDate = new SimpleDateFormat("M/dd/yy").parse(strDateago);
String xlsfilepath = "E:\\WorkItemReport\\PowerBIWorkItemDetails-30-May-24.csv";
File workitemfile = new File(xlsfilepath);
if(!workitemfile.exists())
	workitemfile.createNewFile();

try{
	FileWriter writer = new FileWriter(workitemfile);
  BufferedWriter bufferedWriter = new BufferedWriter(writer);
	String[] header = {"Application", "Owner", "Requester ID", "Manager", "Store Access Request","Functional Access", "Requested Date"};
	writeRow(bufferedWriter,header);
	QueryOptions qo = new QueryOptions();
	Filter filter = Filter.and(Filter.ge("WorkItem.created",filterfromDate),Filter.eq("WorkItem.type","Form"));
  	qo.addFilter(filter);
	qo.addOrdering("WorkItem.created", true);
	List workItemList = context.getObjects(WorkItem.class,qo);
  	for (WorkItem wItem : workItemList){
		if (wItem != null){
      		if (wItem.getDescription() != null &amp;&amp; wItem.getDescription().contains("Power BI")){
        		List storeAccessRequest = wItem.getList("storesAR");
					if(storeAccessRequest != null){
					  for(int i=0;i &lt; storeAccessRequest.size();i++){
						String appName = "Microsoft Power BI";
						String Owner = wItem.getOwner() == null ? "" : (String)wItem.getOwner().getDisplayName();
						String requesterName = (String) wItem.getAttribute("requesterName") == null ? "": (String) wItem.getAttribute("requesterName") ;
						//String requesterLastName = (String) wItem.getAttribute("requesterLastName") == null ? "": (String) wItem.getAttribute("requesterLastName");
						String managerName = (String) wItem.getAttribute("managerDisplayName") == null ? "" : (String) wItem.getAttribute("managerDisplayName");
						String storeAR = String.valueOf(storeAccessRequest.get(i));
						List functionalAccessList = wItem.getList("functionalAccess");
						String functionalAccessStr = "";
						if(functionalAccessList != null){
						  functionalAccessStr = String.join(" ! ",functionalAccessList);
						}
						SimpleDateFormat formatter = new SimpleDateFormat("MM-dd-yyyy hh.mm aa");
						Date wItemDate = wItem.getCreated();
						String strcreatedDate = "";
						if(wItemDate != null){
						  strcreatedDate = formatter.format(wItemDate);
						}
						String[] datarow = {appName + "," + Owner + "," + requesterName + "," + managerName + "," + storeAR + "," + functionalAccessStr + "," + strcreatedDate};
						writeRow(bufferedWriter,datarow);
					  }
					}  
			}
		}
	}
	bufferedWriter.close();
	tskSuccess = "Success";
}
catch (Exception e){
	throw new RuntimeException(e);
}

return tskSuccess;
</Source>
</Rule>

</sailpoint>