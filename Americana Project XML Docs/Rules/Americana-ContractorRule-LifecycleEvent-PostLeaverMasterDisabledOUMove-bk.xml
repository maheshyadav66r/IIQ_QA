<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="Americana-ContractorRule-LifecycleEvent-PostLeaverMasterDisabledOUMove-bk" type="IdentityTrigger">
  <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
  <Signature returnType="boolean" />
  <Source>/*

Status is set to ‘Inactive’ and  

Trigger Date: is ‘End date +31’ (Last Working Day +31) in the HCM 

*/

  import sailpoint.object.Application;
  import sailpoint.tools.Util;
  import sailpoint.api.IdentityService;


  import sailpoint.object.Identity;
  import sailpoint.object.Custom;
  import sailpoint.tools.Util;
  import java.text.SimpleDateFormat;
  import java.util.regex.Pattern;

  import org.apache.log4j.Level;
  import org.apache.log4j.Logger;

  boolean eventTriggerFlg = false;

  Logger logger = Logger.getLogger("Americana.ContractorRule.IdentityTrigger.MasterDisabledOUMove");
  logger.setLevel(Level.DEBUG);

  logger.debug("Start Americana-Rule-IdentityTrigger-MasterDisabledOUMove");

  logger.debug("newIdentity : "+newIdentity);

  if(null != newIdentity &amp;&amp; newIdentity.getAttribute("endDate") != null){

   // logger.debug("newIdentity status : "+newIdentity.getAttribute("status"));
    //logger.debug("newIdentity revokeUserAccess : "+newIdentity.getAttribute("revokeUserAccess"));



      String strEndDate = (String) newIdentity.getAttribute("endDate");
      logger.debug(" strEndDate : "+strEndDate);
      SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");


      Date endDate = sf.parse(strEndDate);
      logger.debug(" endDate : "+endDate);
      int diff = Util.getDaysDifference(new Date(), endDate);
      logger.debug(" diff : "+diff);
      if(diff &gt; 30){

        IdentityService isr = new IdentityService(context);
        List links = isr.getLinks(newIdentity, context.getObjectByName(Application.class, "Active Directory"));
        logger.debug(" links : "+links);
        if(Util.nullSafeSize(links) &gt; 0){
          String userAdDn = links.get(0).getAttribute("distinguishedName");
          logger.debug(" userAdDn : "+userAdDn);
          String masterDisabledOU = "";
          Custom custom = context.getObjectByName(Custom.class, "Americana-Custom-AD-CountryVSDisabledOUMapping");
          logger.debug(" custom : "+custom);
          if(null != custom){
            masterDisabledOU = custom.get("MasterDisabledOU");
          }

          logger.debug(" masterDisabledOU : "+masterDisabledOU);

          boolean isInMaterDisabledOU = Pattern.compile(Pattern.quote(masterDisabledOU), Pattern.CASE_INSENSITIVE).matcher(userAdDn).find();
          if(isInMaterDisabledOU){
            logger.debug("User is Alredy in Master Disabled OU");
            //user alredy moved to master disabled OU
            return false;
          }

          boolean isInCountryDisabledOU = Pattern.compile(Pattern.quote("OU=Disabled"), Pattern.CASE_INSENSITIVE).matcher(userAdDn).find();
          logger.debug("isInCountryDisabledOU : "+isInCountryDisabledOU);
          if(!isInCountryDisabledOU){
            // user is not in country specific disabled OU
            return false;
          }

          eventTriggerFlg = true;
        }
      }
  }
  logger.debug(" eventTriggerFlg : "+eventTriggerFlg);
  logger.debug("End Americana-Rule-IdentityTrigger-MasterDisabledOUMove");
  return eventTriggerFlg;</Source>
</Rule>

</sailpoint>