<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="Test-Rule-password" type="Refresh">
  <Signature returnType="Object">
    <Inputs>
      <Argument name="identityName" />
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="wfcontext">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source> 
  import sailpoint.object.Identity;
  import sailpoint.api.SailPointContext;
  import sailpoint.api.ObjectUtil;
  import sailpoint.api.IdentityService;
  import sailpoint.object.Link;
  import java.util.ArrayList;
  String decrypPassword = context.decrypt("1:ACP:GfZ4mKWYjTQ9KkHn8pswRx4a8HvpMNvb8Rbe66JAlsm+QcHSCQDrjMGFCs4DxMpdZabEfhmB2Ie47qg2KYkLzA==");
  return decrypPassword;
  try{

    IdentityService identitySrvc = new IdentityService(context);
    log.error("refresh rule for AD Contractors::::"+identity.getName());
    ObjectUtil.unlockIdentity(context, identity);
    // Identity identity=context.getObjectByName(Identity.class,"argupta");
    if(identity!=null){
      List disconPlansList=new ArrayList();;
      List identityDelAccount = identity.getLinks();
      linksDelIterator = identityDelAccount.iterator();
      while(linksDelIterator.hasNext()){

        Link accounts = (Link) linksDelIterator.next();
        strApplicationName=accounts.getApplicationName();
        if(strApplicationName.equalsIgnoreCase("AD Contractors")&amp;&amp;accounts.isDisabled()){
          identity.setAttribute("Status","Leaver");
          /* identity.setAttribute("ImmediateJoiner","joinertriggered");
      identity.setAttribute("userType","Contractor");
      identity.setAttribute("ContractorCreation","true");
      identity.setAttribute("ContractorLicense","AD");*/
          context.saveObject(identity);
          context.commitTransaction();
        }
      }
    }
  }
  catch(Exception e){

    log.error(e.printStackTrace()); 
    throw e;
  }

  </Source>
</Rule>

</sailpoint>