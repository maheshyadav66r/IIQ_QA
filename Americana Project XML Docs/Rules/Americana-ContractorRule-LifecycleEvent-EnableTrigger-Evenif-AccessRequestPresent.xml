<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="Americana-ContractorRule-LifecycleEvent-EnableTrigger-Evenif-AccessRequestPresent" type="IdentityTrigger">
  <Description> this trigger rule will be triggerd if user end date is reached and account is active irrespctive if access request type leaver is already present. if user contractr and he reached end date and his account is disabled. we can re enable using form. in order to re trigger leaver we have to remove access request comparison.</Description>
  <Signature returnType="boolean" />
  <Source>import sailpoint.api.IdentityService;
          import sailpoint.tools.Util;
          import sailpoint.object.Identity;
          import sailpoint.object.Application;
          import sailpoint.object.Link;
  import sailpoint.object.*;
  import sailpoint.tools.Util;
  import java.text.SimpleDateFormat;

  import sailpoint.object.QueryOptions;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.IdentityRequest;

  import org.apache.log4j.Level;
  import org.apache.log4j.Logger;
  import org.apache.log4j.Logger;
  Logger log=Logger.getLogger("customRule4");


  boolean leaverTriggerFlg = false;

 

  log.debug("Start Americana-ContractorRule-IdentityTrigger-Leaver");
log.error("previous identity::::"+previousIdentity);
  log.error("new identity::::::::"+newIdentity);

  log.debug("previousIdentity : "+previousIdentity);
  log.debug("newIdentity : "+newIdentity);

  if(null != newIdentity &amp;&amp; previousIdentity != null){

 // if( null != newIdentity.getAttribute("endDate")&amp;&amp;!newIdentity.getAttribute("endDate").equalsIgnoreCase("never")){
      if( null != newIdentity.getAttribute("endDate")&amp;&amp;!newIdentity.getAttribute("endDate").equalsIgnoreCase("never") &amp;&amp; null != newIdentity.getAttribute("isContractor")&amp;&amp;newIdentity.getAttribute("isContractor").equalsIgnoreCase("YES")){
  
 //  Identity idObj = context.getObjectByName(Identity.class, "newIdentity");
  Application appObj = context.getObjectByName(Application.class, "AD Contractors");
    log.error("appObj "+appObj);
 IdentityService isr = new IdentityService(context);
            List links = isr.getLinks(newIdentity, appObj);
			//countLinks(Identity identity, Application application)
      
            if(Util.nullSafeSize(links) &gt; 0){
               Link adLink = links.get(0);

             log.debug("testing isr");
                 
  boolean disabled=adLink.isDisabled();
  if(!disabled)
   
 {
   
   
    
      String strEndDate = (String) newIdentity.getAttribute("endDate");
      
      SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");

 
        Date endDate = sf.parse(strEndDate);
        log.error("formatting string to date: " + endDate);
        
        Date goLiveDate = sf.parse("2022-12-23");
       log.error("goLiveDate: " + goLiveDate);
       
  
        
        if (endDate.after(goLiveDate)) {
            Date currentDate = new Date();
            if (endDate.compareTo(currentDate) &lt; 0||endDate.compareTo(currentDate) == 0) {
			
			
			
			
              
                        leaverTriggerFlg = true;
            }
       }
           }
			
		
  	
			  
			  
			  }
  
 
      
     
        
  
  }
  

        
    }

    
        
        
    
    
    
 
    
     
  


  //log.error(" leaverTriggerFlg : "+leaverTriggerFlg);


 
  log.error(" leaverTriggerFlg : "+leaverTriggerFlg);

  return leaverTriggerFlg;</Source>
</Rule>

</sailpoint>