<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="Americana_Application Rule_Mobile" type="IdentityAttribute">
  <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
      </Argument>
      <Argument name="attributeDefinition">
        <Description>
           The AttributeDefinition object for this attribute.
        </Description>
      </Argument>
      <Argument name="link">
        <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
      </Argument>
      <Argument name="attributeSource">
        <Description>
          The AttributeSource object.
        </Description>
      </Argument>
      <Argument name="oldValue">
        <Description>
          The original value of the application account attribute.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="attributeValue">
        <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source> import sailpoint.object.Util;
   import sailpoint.object.Filter;
import sailpoint.object.Identity;
  import sailpoint.object.Custom;
  import java.util.HashMap;
  import java.util.Map;
  Custom custom = context.getObjectByName(Custom.class,"Americana-CountryCodes-Mobile");
  
 String strMobile=null;
  String mobileS=null;
   if(link.getApplicationName().equalsIgnoreCase("Azure AD"))
  {
    strMobile=link.getAttribute("mfa_phoneNumber_mobile");
   // log.error("mobile number in azure:::"+strMobile);
  }
 if(link.getApplicationName().equalsIgnoreCase("Mobile Application"))
  {
    strMobile=link.getAttribute("MFAPhoneNumber");
   // log.error("mobile number in azure:::"+strMobile);
  }
   if(link.getApplicationName().equalsIgnoreCase("Active Directory"))
  {
    strMobile=link.getAttribute("telephoneNumber");
     if(strMobile==null){
       
       strMobile=link.getAttribute("mobile");
     //  log.error("mobile number in AD:::"+strMobile);
     }
      
    
  }
   if(link.getApplicationName().equalsIgnoreCase("AD Contractors"))
  {
    strMobile=link.getAttribute("telephoneNumber");
     if(strMobile==null){
       
       strMobile=link.getAttribute("mobile");
     //  log.error("mobile number in AD:::"+strMobile);
     }
      
    
  }
   if(link.getApplicationName().equalsIgnoreCase("Oracle Fusion HCM"))
  {
    strMobile=link.getAttribute("WORK_MOBILE");
   // log.error("mobile number in Oracle:::"+strMobile);
  }

//  log.error("fetched mobile"+strMobile);
if(strMobile!=null){
  if(custom!=null){
    Map countrycode=custom.getAttributes();
   
    for (String code : countrycode.keySet()) {
          //  log.error("key: " + code);
    
      if(strMobile.startsWith(code)){
      //  log.error("inside starts with");
     
        strMobile=strMobile.replace(code,countrycode.get(code));
       
      }
         }
  }
    
mobileS=strMobile.replaceAll("\\s", "");
return mobileS;
}
</Source>
</Rule>

</sailpoint>