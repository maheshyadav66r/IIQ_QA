<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="PS_Validate_RunRule_sendEmail_passwordExpires_rule_april1">
  <Description>rule is used to send email reminders 1||7 days before Password expiry, use this rule for validation</Description>
  <Source>
 
  import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Date;
import sailpoint.object.ResourceObject;
import java.io.InputStreamReader;
import java.util.*;
import sailpoint.api.*;
import sailpoint.api.PasswordGenerator;
import sailpoint.api.SailPointContext;
import sailpoint.object.Identity;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.ObjectOperation;
import sailpoint.object.ProvisioningPlan.Operation;
import sailpoint.object.ProvisioningPlan;
import java.io.BufferedReader;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.log4j.Logger;
import sailpoint.object.*;
import java.lang.*;
import java.time.format.DateTimeFormatter;
import java.text.ParseException;
import sailpoint.tools.GeneralException;
  import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.QueryOptions;

Logger log=Logger.getLogger("customRule4");

  
  
  

  
  
  
  
  
 Filter f = Filter.eq("correlated",true);

  QueryOptions qo= new QueryOptions();
  qo.addFilter(f);
				List ids = context.getObjects(Identity.class);
 
  for(Identity id :ids)
  {
    
    
     String idName=id.getName();
     String idEmail=""; 
    if(id.getAttribute("email")!=null){
 idEmail =id.getAttribute("email");
    
    
    }
    
    
    
    
    
    
    
    
    
    
  
    //if(idName.equalsIgnoreCase("Nirmal Chitlangi(Paramount)")){
   if(id!=null){
     
     
     
     
      String endDate = (String) id.getAttribute("endDate");
      if(endDate!=null &amp;&amp; !endDate.equalsIgnoreCase("never"))
     {
      
      SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");

 
        Date endDate = sf.parse(endDate);
        log.error("endDate: " + endDate);
        
       
       
  
        
      
            Date currentDate = new Date();
            if (!(endDate.compareTo(currentDate) &lt;0 &amp;&amp;endDate.compareTo(currentDate) == 0)) {
			
			
			
			
              
    List links=id.getLinks();
    
   for(Link link:links)
      
    {
      
      
      
    if(link.getApplicationName().equalsIgnoreCase("AD Contractors")||link.getApplicationName().equalsIgnoreCase("Active Directory"))
    {
      
      
       
   boolean disabled=link.isDisabled();
      String status=String.valueOf(disabled);
        
   if(!disabled)
   
   {
    
    String passwordExpires=id.getAttribute("passwordExpires");
      log.error("on demand......passwordExpires :"+passwordExpires);
    String firstName=id.getAttribute("firstname");
        String lastname=id.getAttribute("lastname");
        
        Identity manager=id.getManager();
      	log.error("manager :"+manager);
      String  managerEmail="";
     String  managerName="";
      if(manager!=null){
       
         managerEmail=manager.getAttribute("email");
        managerName=manager.getName();
      }
     
	log.error("managerEmail :"+managerEmail);
		String accountName=id.getAttribute("adLogOnName");
        	String idemail=id.getAttribute("email");
      log.error("idemail "+idemail);
    
 

if(passwordExpires!=null)
{

      // List links=newIdentity.getLinks();


  if( passwordExpires!=null &amp;&amp; !passwordExpires.isEmpty() ){



 
  /*Date currentDate=new Date();
  
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
        Date expirydate = dateFormat.parse(passwordExpires);
    
    	Long accountexpiry = expirydate.getTime();
    log.info("accountexpiry "+accountexpiry);
    Long current=currentDate.getTime();
    
	  diffInDays = (int) ((accountexpiry-current) / (1000*60*60*24)) ;	
	 log.info("diffInDays "+diffInDays);
  */
    
    
    
    LocalDate expiryDate = LocalDate.parse(passwordExpires);
    
    
    DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
String expiryDateString = expiryDate.format(formatter1);
    
    
    
log.info("Expiry date: " + expiryDate);

// Get the current date
LocalDate currentDate = LocalDate.now();
log.info("Current date: " + currentDate);

// Calculate the difference in days
long diffInDays = expiryDate.toEpochDay() - currentDate.toEpochDay();
log.info("Difference in days: " + diffInDays);
    
    
    
    
           EmailOptions eobj1 = new EmailOptions();
        
        if(idemail!=null)
        {
        eobj1.setTo(idemail);
        eobj1.setCc(managerEmail);
        }
    
    else
    {
     eobj1.setTo(managerEmail);
       
      
    }
     
        
    eobj1.setVariable("accountName",accountName);
    eobj1.setVariable("endDate",expiryDateString);
        eobj1.setVariable("firstName",firstName); 
        eobj1.setVariable("lastname",lastname);
   
      


	   List passwordExpires30 = new ArrayList();
     List passwordExpires15 = new ArrayList(); List accountExpires5 = new ArrayList();
    String info="";
    
    if(diffInDays==7){
    log.error("inside workflow difference in days is 30");
      info=idName +","+passwordExpires+","+status+","+idEmail+","+firstName+","+lastname+","+managerName+","+managerEmail;
           passwordExpires30.add(info);
      
    if (!passwordExpires30.isEmpty()) {
       FileWriter writer = new FileWriter("C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\logs\\passwordExpiresNEW72_may1.csv", true);
        for (String info : passwordExpires30) {
            writer.write(info + "\n");
        }
        writer.close();
    }
	
        
    }
	if(diffInDays==1)
{
 log.error("inside workflow difference in days is 1");
    info=idName +","+passwordExpires+","+status+","+idEmail+","+firstName+","+lastname+","+managerName+","+managerEmail;
       passwordExpires15.add(info);
     if (!passwordExpires15.isEmpty()) {
       FileWriter writer = new FileWriter("C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\logs\\passwordExpiresNEW12_may1.csv", true);
        for (String info : passwordExpires15) {
            writer.write(info + "\n");
        }
        writer.close();
    }

	
        
        
}
      	
}

		




     
    }
	
    }
      
      
     
      
    }
            }
        
            }   
     
     
   
      
       // Identity id=context.getObjectByName(Identity.class,idName);

}
     
    
     
   }
    }
  
  
























  
  
  

  


</Source>
</Rule>

</sailpoint>