<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="Oracle BPM-Get Access Token">
  <Source>
  
  import sailpoint.api.SailPointContext;
  import sailpoint.api.IdentityService;
  import sailpoint.api.Provisioner;

  import sailpoint.object.Application;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.Custom;
  import sailpoint.object.Rule;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningProject;

  import sailpoint.object.Workflow;

  import java.io.IOException;
  import java.io.InputStream;
  import java.net.HttpURLConnection;
  import java.net.URL;
  import java.util.Scanner;

  import sailpoint.object.ResourceObject;
  import java.text.SimpleDateFormat;
  import java.text.DateFormat;
  import sailpoint.tools.CloseableIterator;
  import sailpoint.tools.GeneralException;
  import sailpoint.tools.Util;
  import java.text.Normalizer;
  import java.text.Normalizer.Form;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.QueryOptions;
  import sailpoint.object.Filter;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailFileAttachment;
  import java.io.File;
  import sailpoint.object.ManagedAttribute;

  import java.nio.file.Files;

  import sailpoint.connector.ADLDAPConnector;
  import sailpoint.connector.Connector;
  import sailpoint.connector.ConnectorException;
  import org.apache.commons.lang3.StringUtils;
  import org.apache.commons.logging.LogFactory;
  import org.apache.commons.logging.Log;
  import sailpoint.object.Attributes;
  import sailpoint.object.ResourceObject; 
  import sailpoint.object.TaskResult; 
  import sailpoint.api.Aggregator;
  import org.json.JSONException;
  import org.json.JSONObject;
  import org.json.JSONArray;
  import org.apache.log4j.Logger;
  
  

    String accessToken = "";
    log.trace("Entered Method getAccessToken : ");
    try {

      URL url = new URL("https://idcs-fdf3b0329b2c4925a350f9aecd4113a2.identity.oraclecloud.com/oauth2/v1/token");
      HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
      httpConn.setRequestMethod("POST");

      httpConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
      httpConn.setRequestProperty("Authorization", "Basic Y2E1ZjJmNWNlNWVkNDAzZWJlOWNmNzEzOTUwMjM3NDI6MmU1MDM0ZDItNzcyMS00ZDk4LTgwYWEtNGVmYzcyM2FkOGU1");

      httpConn.setDoOutput(true);
      OutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());
      writer.write("grant_type=client_credentials&amp;&amp;scope=urn:opc:idm:__myscopes__");
      writer.flush();
      writer.close();
      httpConn.getOutputStream().close();

      InputStream responseStream = httpConn.getResponseCode() / 100 == 2
        ? httpConn.getInputStream()
        : httpConn.getErrorStream();
      Scanner s = new Scanner(responseStream).useDelimiter("\\A");
      String response = s.hasNext() ? s.next() : "";

      response= response.replaceAll(":","="); //This is to replace in the response  : with =
      response = response.replaceAll("\"",""); //This is to replace in the response  " with empty
      Map responseMap = sailpoint.tools.Util.stringToMap(response); //Converting the response String to Map 
      if (responseMap != null &amp;&amp; !responseMap.isEmpty()) {
        accessToken = responseMap.get("access_token");
      }
    } catch (Exception e) {
      String exceptMsg = "Error While Generating the Access Token in Rule [ "+ruleName +" ] :"+ e;
      log.error(exceptMsg);
    }
    System.out.println("Access token"+accessToken);
    log.trace("Exiting Method getAccessToken : "+accessToken);
    return accessToken;
  
  </Source>
</Rule>

</sailpoint>