<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell" name="testProvision to AD">
  <Description>This statnd alone rule is used to provision accountExpiry based on report created by Ps_misMatchEndDate. Note : comment  sendigEmail(identity, emailTem,"Access Provisioning",identity.getEmail()); in Contrctor AD after provision rule to avoid the sending email to serviceDesk</Description>
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" name="TestRule-accountexpires" />
  </ReferencedRules>
  <Source>

    import org.apache.log4j.Logger;

    import java.io.File;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

  import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
  import sailpoint.object.Identity;
  import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.*;
        import java.lang.String;
        import sailpoint.api.Provisioner;
        import sailpoint.api.*;
        import sailpoint.object.ProvisioningProject;
		import sailpoint.object.*; 
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest; 
  import sailpoint.api.TaskManager; 
  import java.util.*;
  import sailpoint.object.ProvisioningPlan.AccountRequest; 
  import sailpoint.object.ProvisioningPlan.AttributeRequest; 
  import sailpoint.tools;
  import java.lang.*;
  import java.text.*;
import sailpoint.object.QueryInfo;
  import sailpoint.object.*;
  import sailpoint.connector.*;
  import sailpoint.connector.*;
  import sailpoint.api.*;
  import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

  String errormsg="";
String appname="AD Contractors";
String accountName="";
 
 
		

  Logger log = Logger.getLogger("customRule4");
  log.debug("provision to AD");

  List emails = new ArrayList();
  try {

      String filename = "C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\logs\\provisionToAD.csv";

    
Scanner sc = new Scanner(new File(filename));
sc.useDelimiter("\r\n");
while (sc.hasNext()) {
String username = (String) sc.next(); 
emails.add(username);
}
sc.close();
   
} catch (Exception e) {

      log.error("PS_SendReminderEmails: " + e.getMessage());
}
  

try {
    
for (Object obj1 : emails) {
String user = (String)obj1;

     //   log.debug("PS_SendReminderEmails: email/username: " + email);
Identity userid = context.getObjectByName(Identity.class, user);
       
if (userid != null) {
  
  
  List links=userid.getLinks();
  for(Link link:links){
    
    if(link.getApplicationName().equalsIgnoreCase("AD Contractors")){
      
     accountName= link.getAttribute("distinguishedName"); 
  }
  }
  
  

//String endDate = userid.getAttribute("endDate");
 // String endDate ="2024-03-10";
  String endDate ="2024-09-30";
//  log.error(".......................end date.........................:"+endDate);

        String accountExpDate=getAcccountExpiresValue(endDate);
  
  /********************************comment when running actual provision******************/
  
/*   if(accountExpDate!=null &amp;&amp; !accountExpDate.equalsIgnoreCase("never"))
  {

        DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ss a z", Locale.ENGLISH);
        LocalDateTime dateTime = LocalDateTime.parse(accountExpDate, inputFormatter);

        DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String outputDate = dateTime.format(outputFormatter);

       log.error("Converted date: " + outputDate);
  
  }*/
  
  
  
  
  
  
  
  log.error(".......................accountExpDate.........................:"+accountExpDate);
        ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(userid);

        AccountRequest acr = new AccountRequest();
        acr.setApplication("AD Contractors");
        acr.setOperation(AccountRequest.Operation.Modify);
       
        acr.add(new AttributeRequest("accountExpires", accountExpDate));


        plan.add(acr);
        log.error("plan is:"+plan.toXml());

        log.error("end of the plan");
       
        Provisioner prov=new Provisioner(context);
        prov.setNoLocking(true);
        prov.setOptimisticProvisioning(true);
        ProvisioningProject project = prov.compile(plan);
        prov.execute(plan);
 log.error("................................................PROVISION COMPLETERD FOR....................FOR ::"+userid.getName());

  
  
  
  
  
  
  
  
  
  
  
  
  
 
/* ********Commenting snippet used for single Contractor AD aggregation

Application app=context.getObjectByName(Application.class,appname);
  String appConnName=app.getConnector();
  Connector appConnector=sailpoint.connector.ConnectorFactory.getConnector(app, null);
  if(appConnector==null)
  {
    errormsg="failed to construct an instance of connector";
    return errormsg;
  }
  ResourceObject robj=null;
  try{
    robj=(ResourceObject)appConnector.getObject("account",accountName,null);
  }
  catch(sailpoint.connector.ObjectNotFoundException onfe)
  {
  errormsg="connector could not find account";
    return errormsg;
  }
  if(robj==null)
  {
     errormsg=" could not find resource object";
    return errormsg;
  }
  Attributes argMap=new Attributes();
  argMap.put("noOptimizeReaggregation","true");
  Aggregator agg=new Aggregator(context, argMap);
  if(agg==null)
  {
    errormsg=" could not find connector";
    return errormsg;
  }
  TaskResult tr=agg.aggregate(app,robj);
    
*/    
    
    
         
}
}
    
} catch (Exception e) {

      log.error("error message: " + e.getMessage());
}
 
       
      
          
</Source>
</Rule>

</sailpoint>