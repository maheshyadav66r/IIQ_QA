<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Workflow explicitTransitions="true" libraries="Identity" name="Americana-ContractorWorkflow-LifecycleEvent-PostLeaverMasterDisabledOUMove" type="IdentityLifecycle">
  <Variable name="trace" />
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event" transient="true">
    <Description>
      The IdentityChangeEvent.  It can be used to build
      the provisioning plan, but does not need to be
      persisted with the case, so marked as transient.
    </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan, which is built by a service method. </Description>
  </Variable>
  <Variable editable="true" initializer="false" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.
    </Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to 
      see the results of the request.
    </Description>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover">
    <Description>
      A String that specifies the name of the Identity that will 
      be assigned any approvals where the owner of the approver 
      can't be resolved. Example if the scheme is "owner" and the 
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>
      String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.
    </Description>
  </Variable>
  <Variable initializer="false" input="true" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      ProvisioningProject which is just a compiled version of the ProvisioningPlan.
    </Description>
  </Variable>
  <Variable name="identityRequestId" output="true">
    <Description>
       The sequence id of the Identity request object which is stored in 
       the name field of the identity request.
    </Description>
  </Variable>
  <Variable name="cart" output="true">
    <Description>
       This variable includes all ApprovalItems that are part of 
       the request process and is updated during the AfterScript
       of the approval process by assimilating the decisions 
       and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable initializer="Normal" input="true" name="workItemPriority">
    <Description>
       The String version of a WorkItem.Priority. This variable is 
       used to set the priority on all of the workitems generated 
       as part of this workflow and also set on the IdentityRequest
       object.
    </Description>
  </Variable>
  <Variable input="true" name="accountName" />
  <Description>Disable all accounts when an employee leaves the company.</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library" />
  </RuleLibraries>
  <Step icon="Start" name="Build Provisioning Plan" posX="50" posY="10" resultVariable="plan">
    <Script>
      <Source>

       		import sailpoint.api.IdentityService;
          import sailpoint.tools.Util;
          import sailpoint.object.Identity;
          import sailpoint.object.Application;
          import sailpoint.object.Link;
          import sailpoint.object.Custom;
          import sailpoint.object.ProvisioningPlan;
          import sailpoint.object.ProvisioningPlan.AccountRequest;
          import sailpoint.object.ProvisioningPlan.AttributeRequest;

          import org.apache.log4j.Level;
          import org.apache.log4j.Logger;
import org.apache.log4j.Logger;
 Logger logger=Logger.getLogger("customRule4");
					



         // Logger logger = Logger.getLogger("Americana.Workflow.PostLeaverMasterDisabledOUMove.Step.BuildProvisioningPlan");
          //logger.setLevel(Level.DEBUG);

          logger.debug("Start Americana-Workflow-PostLeaverMasterDisabledOUMove.Step.BuildProvisioningPlan");

					String auditJobTitle;
					String auditManager;

          ProvisioningPlan plan = null;
          Identity identityObj = context.getObjectByName(Identity.class, identityName);
          Application appObj = context.getObjectByName(Application.class, "AD Contractors");
		  Application azureADAppObj = context.getObjectByName(Application.class, "Azure AD");

          logger.debug(" identityObj : "+identityObj);
          logger.debug(" appObj : "+appObj);
          if(null != identityObj &amp;&amp; appObj != null &amp;&amp; azureADAppObj != null){
        
          auditJobTitle =identityObj.getAttribute("jobTitle");
          wfcontext.setVariable("auditJobTitle",auditJobTitle);

          Identity mngr = identityObj.getManager();
          if(mngr!=null){
          auditManager = mngr.getName();
            wfcontext.setVariable("auditManager",auditManager);
          }
        
          
            IdentityService isr = new IdentityService(context);
            List links = isr.getLinks(identityObj, appObj);
         List azureADLinks = isr.getLinks(identityObj, azureADAppObj);
            logger.debug(" links : "+links);
            if(Util.nullSafeSize(links) &gt; 0){

              Link adLink = links.get(0);

              plan = new ProvisioningPlan();

              String masterDisabledOU = "";
        
        //comment 146-150 in prod
            /*  Custom custom = context.getObjectByName(Custom.class, "Americana-Custom-AD-CountryVSDisabledOUMapping");
              logger.debug(" custom : "+custom);
              if(null != custom){
                masterDisabledOU = custom.get("MasterDisabledOU");
              }*/
        
        //need to uncomment in prod
         masterDisabledOU = "OU=Disabled Contractors,OU=Americana Office,DC=Americana,DC=global";	

              logger.debug(" masterDisabledOU : "+masterDisabledOU);

              AccountRequest accountRequest = new AccountRequest(AccountRequest.Operation.Modify, adLink.getApplicationName(), null, adLink.getAttribute("distinguishedName"));
              accountRequest.add(new AttributeRequest("AC_NewParent", ProvisioningPlan.Operation.Set, masterDisabledOU));
         accountRequest.add(new AttributeRequest("manager", ProvisioningPlan.Operation.Set, ""));
         accountRequest.add(new AttributeRequest("title", ProvisioningPlan.Operation.Set, ""));
        
        			wfcontext.setVariable("accountName",  adLink.getAttribute("distinguishedName").split(",")[0]+","+masterDisabledOU);
              plan.add(accountRequest);
            }
			
			if(Util.nullSafeSize(azureADLinks) &gt; 0){
        	for(Link azureADLink : azureADLinks ){
              if(azureADLink.isDisabled()){
        			//Link azureADLink = azureADLinks.get(0);
        			if("Azure AD".equalsIgnoreCase(azureADLink.getApplicationName())) {
        				List assignedPlans = (List) azureADLink.getAttribute("assignedPlans");
        					if(Util.nullSafeSize(assignedPlans) &gt; 0) {
        					AccountRequest acctReq = new AccountRequest(AccountRequest.Operation.Modify, azureADLink.getApplicationName(), null, azureADLink.getAttribute("objectId"));
        					acctReq.add(new AttributeRequest("assignedPlans", ProvisioningPlan.Operation.Remove, assignedPlans ));
        					plan.add(acctReq);
        				}
        			}
        }

        }
        
        		}
				
          }

          logger.debug(" plan : "+plan);
          logger.debug("End Americana-Workflow-PostLeaverMasterDisabledOUMove.Step.BuildProvisioningPlan");
          return plan;

          </Source>
    </Script>
    <Transition to="Initialize" when="script:(plan != null)" />
    <Transition to="end" />
  </Step>
  <Step icon="Task" name="Initialize" posX="170" posY="10">
    <Arg name="formTemplate" value="Identity Update" />
    <Arg name="identityName" value="ref:identityName" />
    <Arg name="identityDisplayName" value="ref:identityDisplayName" />
    <Arg name="launcher" value="ref:launcher" />
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning" />
    <Arg name="plan" value="ref:plan" />
    <Arg name="policyScheme" value="none" />
    <Arg name="workItemPriority" value="ref:workItemPriority" />
    <Arg name="source" value="ref:source" />
    <Arg name="trace" value="ref:trace" />
    <Arg name="flow" value="PostLeaver" />
    <Description>
      Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into 
      project and checking policy violations.
    </Description>
    <Return name="project" to="project" />
    <Return name="approvalSet" to="cart" />
    <Return name="identityRequestId" to="identityRequestId" />
    <Return name="policyViolations" to="policyViolations" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize" />
    </WorkflowRef>
    <Transition to="Provision" />
  </Step>
  <Step condition="script:!((size(policyViolations) &gt; 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))" icon="Task" name="Provision" posX="290" posY="10">
    <Arg name="approvalScheme" value="ref:approvalScheme" />
    <Arg name="fallbackApprover" value="ref:fallbackApprover" />
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning" />
    <Arg name="formTemplate" value="Identity Update" />
    <Arg name="identityDisplayName" value="ref:identityDisplayName" />
    <Arg name="identityName" value="ref:identityName" />
    <Arg name="identityRequestId" value="ref:identityRequestId" />
    <Arg name="launcher" value="ref:launcher" />
    <Arg name="manualActionsEmailTemplate" value="Pending Manual Changes" />
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning" />
    <Arg name="workItemPriority" value="ref:workItemPriority" />
    <Arg name="project" value="ref:project" />
    <Arg name="policyScheme" value="none" />
    <Arg name="noTriggers" value="true" />
    <Arg name="trace" value="ref:trace" />
    <Description>
      Call the standard subprocess that will process the 
      approval decisions and do provisioning.  This
      includes calling any configured provisioning 
      connectors and building manual actions.
    </Description>
    <Return name="project" to="project" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Provision" />
    </WorkflowRef>
    <Transition to="Single Account Aggregation">
      <Script>
        <Source>
	import sailpoint.tools.Util;
	if((wfcase.getErrors() == null || !wfcase.getErrors().isEmpty()) ) {
	 return true;
	} 
	return false;
	</Source>
      </Script>
    </Transition>
    <Transition to="Finalize" />
  </Step>
  <Step action="rule:Americana-Rule-ActiveDirectoryAggregateSingleAccount" icon="Email" name="Single Account Aggregation" posX="351" posY="10">
    <Arg name="applicationName" value="AD Contractors" />
    <Arg name="accountName" value="ref:accountName" />
    <Transition to="Finalize" />
  </Step>
  <Step catches="complete" condition="script:!((size(policyViolations) &gt; 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))" icon="Task" name="Finalize" posX="410" posY="10">
    <Arg name="approvalSet" value="ref:cart" />
    <Arg name="project" value="ref:project" />
    <Arg name="workItemPriority" value="ref:workItemPriority" />
    <Arg name="trace" value="ref:trace" />
    <Arg name="identityRequestId" value="ref:identityRequestId" />
    <Arg name="identityName" value="ref:identityName" />
    <Description>
      Call the standard subprocess that can audit/finalize the request.
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Finalize" />
    </WorkflowRef>
    <Transition to="setIdentityAttributes" />
  </Step>
  <Step icon="Task" name="setIdentityAttributes" posX="1360" posY="252">
    <Arg name="identityName" value="ref:identityName" />
    <Script>
      <Source>
        import sailpoint.object.*;
        import java.text.SimpleDateFormat;
        import java.util.Date;
        Identity identityObj = context.getObjectByName(Identity.class, identityName);

            if(identityObj != null) {
            identityObj.setManager(null);
            context.saveObject(identityObj);
            context.commitTransaction();
        }
       </Source>
    </Script>
    <Transition to="Create Audit Event" />
  </Step>
  <Step action="audit" name="Create Audit Event" posX="1360" posY="252">
    <Arg name="auditManager" value="ref:auditManager" />
    <Arg name="auditJobTitle" value="ref:auditJobTitle" />
    <Arg name="identityName" value="ref:identityName" />
    <Script>
      <Source>
        import sailpoint.server.Auditor;
        import sailpoint.object.AuditEvent;
        import org.apache.log4j.Logger;
				import java.util.Date;
				import java.text.SimpleDateFormat;
      
 Logger logger=Logger.getLogger("customRule4");
				//Logger logger=Logger.getLogger("Leaver Audit Event Logger");
        
        logger.error("auditManager" +auditManager);
        logger.error("auditJobTitle" +auditJobTitle);
        String strManager=null;
        Identity id = context.getObjectByName(Identity.class,identityName);
        if(id!=null){
         String endDate=id.getAttribute("endDate");
        String jobTitle=id.getAttribute("jobTitle");
        Identity manager = id.getManager();
        if(manager!=null){
        strManager = manager.getName();
        }
        }
        String strAuditAction=null;
        String strAction=null;
        String strTarget=null;
		SimpleDateFormat sdf = null;
		String strCurrentDate=null;
       
        AuditEvent adtEvent=null;
       // Logger logger = Logger.getLogger("com.CustomLogs");
        logger.debug("Inside Create Audit Event - Start");
        try{ 
				sdf = new SimpleDateFormat("MM/dd/yyyy");
				strCurrentDate = sdf.format(new Date());

      
        logger.debug("Create Audit Event::identityName= "+identityName);
        logger.debug("Create Audit Event::managerName= "+managerName);
        strAuditAction="Contractor/Interim/generic Leaver event : "+identityName;
        strTarget="Post Leaver event triggered for user:"+identityName;
       strAction = "Post_Leaver_Contractor_Audit_Action";
        //if we are triggering post leaver for disabled date null users then uncomment below
        //audit action = Cleanup_Leaver_Contractor_Audit_Action for disabled date==null users
      //strAction = "Cleanup_Leaver_Contractor_Audit_Action";
        if(Auditor.isEnabled(strAction)){

        logger.debug("Create Audit Event::Leaver Enabled!!!");
        adtEvent = new AuditEvent();
        adtEvent.setSource("Cleanup Leaver Event");
        adtEvent.setTarget(strTarget);
        adtEvent.setAction(strAction);
        adtEvent.setAccountName(identityName);
        adtEvent.setAttributeName("Leaver Event");
        adtEvent.setString1(strAuditAction);
		
		    adtEvent.setString2("Post Leaver Event Triggered on:"+strCurrentDate);
        
         
        if(auditManager!=null)
        {
         adtEvent.setString3("User Manager is:"+auditManager);
        }
         
        if(auditJobTitle!=null){
         adtEvent.setString4("User jobTitle  is:"+auditJobTitle);
        }
        Auditor.log(adtEvent);
        context.commitTransaction();
        log.error("adtEvent  :"+adtEvent);
        }
        }catch(Exception e){

        logger.error("Exception= "+e.printStackTrace()); 
        throw e;
        }
        logger.debug("Create Audit Event- End");
      </Source>
    </Script>
    <Transition to="end" />
  </Step>
  <Step icon="Stop" name="end" posX="540" posY="10" />
</Workflow>

</sailpoint>