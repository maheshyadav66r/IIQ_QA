<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Workflow explicitTransitions="true" libraries="Identity" name="Americana-Workflow-LifecycleEvent-Joiner" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event" transient="true">
    <Description>
      The IdentityChangeEvent.  It can be used to build
      the provisioning plan, but does not need to be
      persisted with the case, so marked as transient.
    </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="false" name="isWriteBackComplete">
    <Description>erpProvisionStatus.</Description>
  </Variable>
  <Variable initializer="false" name="hasADProvisioned">
    <Description>Active Directory Provisioon Status of the user passed in.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan, which is built by a service method. </Description>
  </Variable>
  <Variable editable="true" initializer="false" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.
    </Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to 
      see the results of the request.
    </Description>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover">
    <Description>
      A String that specifies the name of the Identity that will 
      be assigned any approvals where the owner of the approver 
      can't be resolved. Example if the scheme is "owner" and the 
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>
      String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.
    </Description>
  </Variable>
  <Variable input="true" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      ProvisioningProject which is just a compiled version of the ProvisioningPlan.
    </Description>
  </Variable>
  <Variable name="identityRequestId" output="true">
    <Description>
      The sequence id of the Identity request object which is stored in 
      the name field of the identity request.
    </Description>
  </Variable>
  <Variable name="cart" output="true">
    <Description>
      This variable includes all ApprovalItems that are part of 
      the request process and is updated during the AfterScript
      of the approval process by assimilating the decisions 
      and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable initializer="Normal" input="true" name="workItemPriority">
    <Description>
      The String version of a WorkItem.Priority. This variable is 
      used to set the priority on all of the workitems generated 
      as part of this workflow and also set on the IdentityRequest
      object.
    </Description>
  </Variable>
  <Description>Disable all accounts when an employee leaves the company.</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library" />
    <Reference class="sailpoint.object.Rule" name="Americana-RuleLibrary-Attribute" />
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="50" posY="10">
    <Transition to="Get User Type" />
  </Step>
  <Step icon="Task" name="Get User Type" posX="50" posY="10" resultVariable="userType">
    <Script>
      <Source>
        return getUserType(workflow,identityName);
      </Source>
    </Script>
    <Transition to="Build AD Plan" when="userType != null &amp;&amp; &quot;RSC&quot;.equalsIgnoreCase(userType)" />
    <Transition to="end" />
  </Step>
  <Step icon="Task" name="Build AD Plan" posX="50" posY="10" resultVariable="plan">
    <Script>
      <Source>
        return buildADJoinerPlan(workflow,identityName);
      </Source>
    </Script>
    <Transition to="Launch LCM Provisioning" when="plan != null" />
    <Transition to="end" />
  </Step>
  <Step icon="Task" name="Launch LCM Provisioning" posX="290" posY="10">
    <Arg name="approvalScheme" value="none" />
    <Arg name="flow" value="Joiner" />
    <Arg name="identityDisplayName" value="ref:identityDisplayName" />
    <Arg name="identityName" value="ref:identityName" />
    <Arg name="plan" value="ref:plan" />
    <Arg name="launcher" value="ref:launcher" />
    <Arg name="policyScheme" value="none" />
    <Arg name="notificationScheme" value="none" />
    <Arg name="noTriggers" value="true" />
    <Description>
      Call the standard process that will process the 
      approval decisions and do provisioning.  This
      includes calling any configured provisioning 
      connectors and building manual actions.
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="LCM Provisioning" />
    </WorkflowRef>
    <Transition to="Write Back To Fusion" when="wfcase.getErrors() == null || wfcase.getErrors().isEmpty()" />
    <Transition to="end" />
  </Step>
  <Step icon="Task" name="Write Back To Fusion" posX="50" posY="10">
    <Script>
      <Source>
        return buildAndExecuteWriteBackPlan(workflow,identityName);
      </Source>
    </Script>
    <Transition to="Schedule AzureAD License Assignment Workflow">
      <Script>
        <Source>

          if (sailpoint.tools.Util.isNotNullOrEmpty(userType) &amp;&amp; userType.equalsIgnoreCase("RSC") &amp;&amp; hasADProvisioned == true &amp;&amp; isWriteBackComplete == true) {
          return true;
          }
          return false;
        </Source>
      </Script>
    </Transition>
    <Transition to="end" />
  </Step>
  <Step icon="Task" name="Schedule AzureAD License Assignment Workflow" posX="50" posY="10">
    <Description>
      Schedule workflow 'Americana-Workflow-AzureADLicenseAssignment' to launch after 35 minutes, as Active Directity to Azure Sync job is scheduled for every 30 minutes
    </Description>
    <Script>
      <Source>

        import java.util.Date;

        import sailpoint.api.RequestManager;
        import sailpoint.object.Attributes;
        import sailpoint.object.Identity;
        import sailpoint.object.Request;
        import sailpoint.object.RequestDefinition;
        import sailpoint.object.Workflow;
        import sailpoint.tools.GeneralException;
        import sailpoint.workflow.StandardWorkflowHandler;

        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;


        Logger logger = Logger.getLogger("Americana.Workflow.LifecycleEvent.Joiner.Step.ScheduleAzureADLicenseAssignmentWorkflow");
        logger.setLevel(Level.DEBUG);

        logger.debug("Start Step.ScheduleAzureADLicenseAssignmentWorkflow");


        String workflowName = "Americana-Workflow-AzureADLicenseAssignment";
        String caseName     = "Run '" + workflowName + "' for: " + identityName;
        String requesterId  = "spadmin";

        Workflow eventWorkflow = context.getObject(Workflow.class, workflowName);
        if (null == eventWorkflow) {
        logger.error("Could not find a workflow named: " + workflowName);
        throw new GeneralException("Invalid worklfow: " + workflowName);
        }

        // Simulate the request being submitted by a user. Default: spadmin.
        Identity id = context.getObjectByName(Identity.class, requesterId);
        if (null == id) {
        logger.error("Could not find a requester Identity: " + requesterId);
        throw new GeneralException("Invalid identity: " + requesterId);
        }

        // Ask the Request Processor to start the workflow 35 minutes from now.
        // Append the time stamp to the workflow case name to ensure it's unique. 
        long launchTime = System.currentTimeMillis() + (35 * 60 * 1000);
        caseName = caseName + "(" + launchTime + ")";

        // Build out a map of arguments to pass to the Request Scheduler.
        Attributes reqArgs = new Attributes();
        reqArgs.put(StandardWorkflowHandler.ARG_REQUEST_DEFINITION, sailpoint.request.WorkflowRequestExecutor.DEFINITION_NAME);
        reqArgs.put(sailpoint.workflow.StandardWorkflowHandler.ARG_WORKFLOW, workflowName);
        reqArgs.put(sailpoint.workflow.StandardWorkflowHandler.ARG_REQUEST_NAME, caseName);
        reqArgs.put( "requestName", caseName );            

        // Build a map of arguments to pass to the Workflow case when it launches.
        Attributes wfArgs = new Attributes();
        wfArgs.put("identityName",    identityName);
        wfArgs.put("workflow",        eventWorkflow.getName());

        reqArgs.putAll(wfArgs);

        // Use the Request Launcher to schedule the workflow reqeust.  This requires
        // a Request object to store the properties of the request item.
        Request req = new Request();
        RequestDefinition reqdef = context.getObject(RequestDefinition.class, "Workflow Request");
        req.setDefinition(reqdef);
        req.setEventDate( new Date( launchTime ) );
        req.setOwner(id);
        req.setName(caseName);
        req.setAttributes( reqdef, reqArgs );

        // Schedule the work flow via the request manager.
        RequestManager.addRequest(context, req);

        logger.debug("End Step.ScheduleAzureADLicenseAssignmentWorkflow");
      </Source>
    </Script>
    <Transition to="end" />
  </Step>
  <Step icon="Stop" name="end" posX="540" posY="10" />
</Workflow>

</sailpoint>