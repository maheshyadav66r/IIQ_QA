<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Workflow explicitTransitions="true" name="Manual Domain and Service Account Creation">
  <Variable initializer="true" name="transient" />
  <Variable initializer="false" name="optimisticProvisioning" />
  <Variable name="trace">
    <Description>Used for debugging this workflow and when set to true trace will be sent to stdout.</Description>
  </Variable>
  <Variable initializer="adUserCreate" name="flow" />
  <Variable name="approvalSet">
    <Description>
      This attributes is set during the "Build Approval Set" step,
      which builds this list by going through the ProvisioningPlan
      to build the line items that need to be approved,

      This variable includes all ApprovalItems that are part of
      the request process and is updated during the AfterScript
      of the approval process by assimilating the decisions
      and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable name="launcher">
    <Description>The name of the identity.</Description>
    <Script>
      <Source>
        import sailpoint.object.Identity;
        
        String userName = context.getUserName();                
        return userName;        
      </Source>
    </Script>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover" />
  <Variable initializer="true" name="transient" />
  <Variable name="identityName" />
  <Variable name="managerApprover" />
  <Variable name="adminApproverEmail" />
  <Variable name="descriptionInAD" />
  <Variable name="firstName" />
  <Variable name="lastName" />
  <Variable name="managerID" />
  <Variable name="selectingAccount" />
  <Variable name="managerEmail" />
  <Variable name="infraPersonApprover" />
  <Variable name="infraPersonApproverEmail" />
  <Variable name="requestedAccountName" />
  <Variable name="accountType" />
  <Variable name="thirdLevelApprover" />
  <Variable name="thirdLevelApproverEmail" />
  <Description>
      A String that specifies the name of the Identity that will    
      can't be resolved. Example if the scheme is "owner" and the
      application doesn't specify and owner.
    </Description>
  <Step icon="Start" name="Start" posX="11" posY="11">
    <Transition to="Account Creation Request Form" />
  </Step>
  <Step icon="Default" name="Account Creation Request Form" posX="146" posY="20">
    <Approval owner="ref:launcher" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,otherJustificationReason,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,otherKindOfPrivilege,jstAccess,otherjstAccessReason,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,serviceotherJustificationReason,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,serviceotherKindOfPrivilege,servicejstAccess,servicejstAccessReason,assignAzureLicenses" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,otherJustificationReason,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,otherKindOfPrivilege,jstAccess,otherjstAccessReason,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,serviceotherJustificationReason,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,serviceotherKindOfPrivilege,servicejstAccess,servicejstAccessReason">
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Account Creation Request Form" />
      <Arg name="workItemDescription" value="User Account Request" />
    </Approval>
    <Transition to="IDRInitailize" />
  </Step>
  <Step icon="Stop" name="Stop" posX="575" posY="35" />
  <Step icon="Default" name="IDRInitailize" posX="138" posY="13">
    <Arg name="identityName" value="ref:launcher" />
    <Arg name="identityDisplayName" value="ref:launcher" />
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning" />
    <Arg name="flow" value="Admin Account Creation Approvals Status" />
    <Arg name="plan">
      <Script>
        <Source>
          import sailpoint.object.ProvisioningPlan;
          import sailpoint.object.Identity;
          import sailpoint.object.ProvisioningPlan.AccountRequest;
          import sailpoint.object.ProvisioningPlan;
          import sailpoint.api.Provisioner;
          
          Identity idObj =  context.getObjectByName(Identity.class,launcher);
          ProvisioningPlan plan = new ProvisioningPlan(); 
          plan.setIdentity(idObj);
          AccountRequest accReq = new AccountRequest();
          accReq.setApplication("Active Directory");
          accReq.setOp(ProvisioningPlan.ObjectOperation.Create);


          accReq.setNativeIdentity(idObj.getName());
          plan.add(accReq);
          return plan;

        </Source>
      </Script>
    </Arg>
    <Return name="identityRequestId" to="identityRequestId" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize" />
    </WorkflowRef>
    <Transition to="Approval Email Information" />
  </Step>
  <Step icon="Default" name="Approval Email Information" posX="904" posY="10">
    <Script>
      <Source>
        import sailpoint.object.Identity;
                              
        if(launcher!=null){    
        wfcontext.setVariable("selectingAccount",selectingAccount);      
        wfcontext.setVariable("infraPersonApproverEmail","mhelnagar@americana-food.com");
        wfcontext.setVariable("thirdLevelApprover","37984");
        wfcontext.setVariable("thirdLevelApproverEmail","gperdikouris@americana-food.com");        
        }               
      </Source>
    </Script>
    <Transition to="Send Email Notification for Submission" />
  </Step>
  <Step icon="Task" name="Send Email Notification for Submission">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.*;        
        
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        
        ccList = Arrays.asList(infraPersonApproverEmail);
        
        HashMap variables = new HashMap();   
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-Submission");  
        String emailId = null;
        
        if (emailTemplate != null) {
            try{
        
        	if(requesterEmailId !=null){
    		  emailId=requesterEmailId;
          }
          
          if(newUserrequesterEmailId !=null){
    		  emailId=newUserrequesterEmailId;
          }
                      
          if(servicerequesterEmailIdofExestinguser !=null){
    		  emailId=servicerequesterEmailIdofExestinguser;
          }     
          
          if(servicerequesterEmailId !=null){
    		  emailId=servicerequesterEmailId;
          }          
        			toAddresses.add(emailId);          			        			
                                            
        			variables.put("identityName",launcher);
        			variables.put("selectingAccount",selectingAccount);       
        
              EmailOptions ops = new EmailOptions(toAddresses, variables);
        			ops.setCc(Util.listToCsv(ccList));
              
             // context.sendEmailNotification(emailTemplate, ops);
            }
            catch(Exception e){
              throw new GeneralException(e);
            }
        }
    </Source>
    </Script>
    <Transition to="Send Email for Admin Review" />
  </Step>
  <Step icon="Task" name="Send Email for Admin Review">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
				import sailpoint.object.*;
        import sailpoint.tools.Util;        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        
        if(launcher!=null){       
                          
          if(region !=null &amp;&amp; region.equalsIgnoreCase("United Arab Emirates")){                	
          adminApproverEmail = "ishaikh@americana-food.com"; 	
        	ccList = Arrays.asList("sasingh@americana-food.com","vgino@americana-food.com");
          }
          
          if(region !=null &amp;&amp; region.equalsIgnoreCase("Qatar")){    			
        	adminApproverEmail = "nsalah@americana-food.com";
          ccList =Arrays.asList("melshenawy@americana-food.com");
          }     
        
         	if(region !=null &amp;&amp; region.equalsIgnoreCase("global")){    			
       		adminApproverEmail = "ishaikh@americana-food.com"; 	
        	ccList = Arrays.asList("sasingh@americana-food.com","vgino@americana-food.com");
          }              
         
          if(serviceregion !=null &amp;&amp; serviceregion.equalsIgnoreCase("United Arab Emirates")){    		  
          adminApproverEmail = "ishaikh@americana-food.com"; 	
        	ccList = Arrays.asList("sasingh@americana-food.com","vgino@americana-food.com");
          }
          
          if(serviceregion !=null &amp;&amp; serviceregion.equalsIgnoreCase("Qatar")){    		  
          adminApproverEmail = "nsalah@americana-food.com";
          ccList =Arrays.asList("melshenawy@americana-food.com");
          }    
        
        	if(serviceregion !=null &amp;&amp; serviceregion.equalsIgnoreCase("global")){    		  
         	adminApproverEmail = "ishaikh@americana-food.com"; 	
        	ccList = Arrays.asList("sasingh@americana-food.com","vgino@americana-food.com");
          }  
          
          if(servicenewuserRegion !=null &amp;&amp; servicenewuserRegion.equalsIgnoreCase("United Arab Emirates")){    		  
          adminApproverEmail = "ishaikh@americana-food.com"; 	
        	ccList = Arrays.asList("sasingh@americana-food.com","vgino@americana-food.com");
          }
          
          if(servicenewuserRegion !=null &amp;&amp; servicenewuserRegion.equalsIgnoreCase("Qatar")){    		  
          adminApproverEmail = "nsalah@americana-food.com";
          ccList =Arrays.asList("melshenawy@americana-food.com");
          }    
        	
         	if(servicenewuserRegion !=null &amp;&amp; servicenewuserRegion.equalsIgnoreCase("global")){    		  
        	adminApproverEmail = "ishaikh@americana-food.com"; 	
        	ccList = Arrays.asList("sasingh@americana-food.com","vgino@americana-food.com");
          }   
          
          if(newuserRegion !=null &amp;&amp; newuserRegion.equalsIgnoreCase("United Arab Emirates")){    		  
          adminApproverEmail = "ishaikh@americana-food.com"; 	
        	ccList = Arrays.asList("sasingh@americana-food.com","vgino@americana-food.com");
          }
          
          if(newuserRegion !=null &amp;&amp; newuserRegion.equalsIgnoreCase("Qatar")){    		  
          adminApproverEmail = "nsalah@americana-food.com";
          ccList =Arrays.asList("melshenawy@americana-food.com");
          } 
       		
        	if(newuserRegion !=null &amp;&amp; newuserRegion.equalsIgnoreCase("global")){    		  
					adminApproverEmail = "ishaikh@americana-food.com"; 	
        	ccList = Arrays.asList("sasingh@americana-food.com","vgino@americana-food.com");					      	
          } else{
       	  adminApproverEmail = "ishaikh@americana-food.com"; 	
        	ccList = Arrays.asList("sasingh@americana-food.com","vgino@americana-food.com");
        }
        }
               
        HashMap variables = new HashMap();        
        
        if (emailTemplate != null) {
       
				toAddresses.add(adminApproverEmail);        
                
        variables.put("identityName",launcher);       
        variables.put("selectingAccount",selectingAccount);        
                
        EmailOptions ops = new EmailOptions(toAddresses, variables);
        ops.setCc(Util.listToCsv(ccList));
              
     //   context.sendEmailNotification(emailTemplate, ops);
        }
    </Source>
    </Script>
    <Transition to="Get Privilege and Justification" />
  </Step>
  <Step icon="Default" name="Get Privilege and Justification" posX="333" posY="31">
    <Script>
      <Source>
  if (null != privilaged @and null != otherKindOfPrivilege @and "Other".equalsIgnoreCase(privilaged)) {
   wfcontext.setVariable("privilaged", wfcontext.getVariable("otherKindOfPrivilege"));
  }
  if (null != serviceprivilaged @and null != serviceotherKindOfPrivilege @and "Other".equalsIgnoreCase(serviceprivilaged)) {
   wfcontext.setVariable("serviceprivilaged", wfcontext.getVariable("serviceotherKindOfPrivilege"));
  }
  if (null != justificationforAccess @and null != otherJustificationReason @and "Other".equalsIgnoreCase(justificationforAccess)) {
   wfcontext.setVariable("justificationforAccess", wfcontext.getVariable("otherJustificationReason"));
  }
  if (null != jstAccess @and null != otherjstAccessReason @and "Other".equalsIgnoreCase(jstAccess)) {
   wfcontext.setVariable("jstAccess", wfcontext.getVariable("otherjstAccessReason"));
  }
  if (null != servicejustificationforAccess @and null != serviceotherJustificationReason @and "Other".equalsIgnoreCase(servicejustificationforAccess)) {
   wfcontext.setVariable("servicejustificationforAccess",wfcontext.getVariable("serviceotherJustificationReason"));
  }
  if (null != servicejstAccess @and null != servicejstAccessReason @and "Other".equalsIgnoreCase(servicejstAccess)) {
   wfcontext.setVariable("servicejstAccess", wfcontext.getVariable("servicejstAccessReason"));
  }
  </Source>
    </Script>
    <Transition to="Admin Review Form" />
  </Step>
  <Step icon="Default" name="Admin Review Form" posX="333" posY="31">
    <Approval name="Admin Review Form" owner="ref:launcher" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion,azureADLicenses" send="domainGroup,selectRegion,assignAzureLicenses">
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Admin Review Form" />
      <Arg name="workItemDescription" value="Admin Review Form" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="assignAzureLicenses" value="ref:assignAzureLicenses" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
    </Approval>
    <Transition to="Preparing Plan Domain Account" when="approved" />
    <Transition to="Account Creation Rejection - Admin" when="!approved" />
  </Step>
  <Step icon="Default" name="Account Creation Rejection - Admin" posX="387" posY="20">
    <Approval name="Account Creation Rejection - Admin" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt,azureADLicenses" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt,azureADLicenses">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();

          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()&gt;0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);
          wfcontext.setVariable("approvalSet", approvalSet);               
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Account Creation Rejection Form" />
      <Arg name="workItemDescription" value="Account Creation Rejection Form" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="domainGroup" value="ref:domainGroup" />
      <Arg name="selectRegion" value="ref:selectRegion" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
      <Arg name="rejectCmt" value="ref:rejectCmt" />
      <OwnerScript>
        <Source>
          if(region !=null &amp;&amp; region.equalsIgnoreCase("United Arab Emirates")){                	
        	return "37553";
          }
          
          if(region !=null &amp;&amp; region.equalsIgnoreCase("Qatar")){    			
        	return "15001888";
          }     
        
         	if(region !=null &amp;&amp; region.equalsIgnoreCase("global")){    			
        	return "37553";
          }              
         
          if(serviceregion !=null &amp;&amp; serviceregion.equalsIgnoreCase("United Arab Emirates")){    		  
          return "37553";
          }
          
          if(serviceregion !=null &amp;&amp; serviceregion.equalsIgnoreCase("Qatar")){    		  
          return "15001888";
          }    
        
        	if(serviceregion !=null &amp;&amp; serviceregion.equalsIgnoreCase("global")){    		  
          return "37553";
          }  
          
          if(servicenewuserRegion !=null &amp;&amp; servicenewuserRegion.equalsIgnoreCase("United Arab Emirates")){    		  
          return "37553";
          }
          
          if(servicenewuserRegion !=null &amp;&amp; servicenewuserRegion.equalsIgnoreCase("Qatar")){    		  
          return "15001888";
          }    
        	
         	if(servicenewuserRegion !=null &amp;&amp; servicenewuserRegion.equalsIgnoreCase("global")){    		  
          return "37553";
          }   
          
          if(newuserRegion !=null &amp;&amp; newuserRegion.equalsIgnoreCase("United Arab Emirates")){    		  
          return "37553";
          }
          
          if(newuserRegion !=null &amp;&amp; newuserRegion.equalsIgnoreCase("Qatar")){    		  
          return "37553";
          } 
       		
        	if(newuserRegion !=null &amp;&amp; newuserRegion.equalsIgnoreCase("global")){    		  
          return "37553";
          } else{
       	 return "37553";
        }
        </Source>
      </OwnerScript>
    </Approval>
    <Transition to="Send Rejection Email" />
  </Step>
  <Step icon="Task" name="Send Email Notification for Admin Approval">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.*;       
        
        System.out.println("Inside Send Email Notification for Admin Approval");
        
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        
        ccList = Arrays.asList(infraPersonApproverEmail);
        
        HashMap variables = new HashMap();   
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-Admin Approval");  
        String emailId = null;
        
        if (emailTemplate != null) {
            try{
        
        	if(requesterEmailId !=null){
    		  emailId=requesterEmailId;
          }
          
          if(newUserrequesterEmailId !=null){
    		  emailId=newUserrequesterEmailId;
          }
                      
          if(servicerequesterEmailIdofExestinguser !=null){
    		  emailId=servicerequesterEmailIdofExestinguser;
          }     
          
          if(servicerequesterEmailId !=null){
    		  emailId=servicerequesterEmailId;
          }          
        			toAddresses.add(emailId);          			        			
                                            
        			variables.put("identityName",launcher);
        			variables.put("selectingAccount",selectingAccount);       
        
              EmailOptions ops = new EmailOptions(toAddresses, variables);
        			ops.setCc(Util.listToCsv(ccList));
              
            //  context.sendEmailNotification(emailTemplate, ops);
            }
            catch(Exception e){
              throw new GeneralException(e);
            }
        }
    </Source>
    </Script>
    <Transition to="Manager Information" />
  </Step>
  <Step icon="Default" name="Manager Information" posX="904" posY="10">
    <Script>
      <Source>
        import sailpoint.object.Identity;
                              
        if(launcher!=null){         
        
        Identity identityId=context.getObjectByName(Identity.class, launcher);                
        Identity managerId=identityId.getManager();                
                
        if(managerId!=null){
        String strManager=managerId.getName();
        String managerEmail = managerId.getEmail();
							
        wfcontext.setVariable("managerApprover",strManager);
        wfcontext.setVariable("managerEmail",managerEmail);    
        wfcontext.setVariable("managerID",managerId);        
        }
        else{
        wfcontext.setVariable("managerApprover","spadmin");        
        }
        }            
      </Source>
    </Script>
    <Transition to="Send Email To Line Manager" />
  </Step>
  <Step icon="Task" name="Send Email To Line Manager">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
				import sailpoint.object.*;
        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        
         HashMap variables = new HashMap();        
        
        if (emailTemplate != null) {
       
				toAddresses.add(managerEmail);
                
        variables.put("identityName",launcher);    
				variables.put("selectingAccount",selectingAccount);       		
        
        EmailOptions ops = new EmailOptions(toAddresses, variables);
              
     //   context.sendEmailNotification(emailTemplate, ops);
            }
    </Source>
    </Script>
    <Transition to="Line Manager Approval" />
  </Step>
  <Step icon="Default" name="Line Manager Approval" posX="448" posY="36">
    <Approval name="Line Manager Approval" owner="ref:launcher" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,genericAccount,namedAccount,servicenamedAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion,azureADLicenses">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();
          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()&gt;0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {          
		  		aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);

          wfcontext.setVariable("approvalSet", approvalSet); 
          }          

          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);       
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="First Level Approval - Line Manager" />
      <Arg name="workItemDescription" value="First Level Approval - Line Manager" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="domainGroup" value="ref:domainGroup" />
      <Arg name="selectRegion" value="ref:selectRegion" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
    </Approval>
    <Transition to="Send Email Notification for Line Manager Approval" when="approved" />
    <Transition to="Account Creation Rejection - First Level" when="!approved" />
  </Step>
  <Step icon="Default" name="Account Creation Rejection - First Level" posX="387" posY="20">
    <Approval name="Account Creation Rejection - First Level" owner="ref:launcher" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt,azureADLicenses">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();

          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()&gt;0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);
          wfcontext.setVariable("approvalSet", approvalSet);               
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Account Creation Rejection Form" />
      <Arg name="workItemDescription" value="Account Creation Rejection Form" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="domainGroup" value="ref:domainGroup" />
      <Arg name="selectRegion" value="ref:selectRegion" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
      <Arg name="rejectCmt" value="ref:rejectCmt" />
    </Approval>
    <Transition to="Send Rejection Email" />
  </Step>
  <Step icon="Task" name="Send Email Notification for Line Manager Approval">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.*;        
        
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        
        ccList = Arrays.asList(infraPersonApproverEmail);
        
        System.out.println("Inside Send Email Notification for Line Manager Approval");
        
        HashMap variables = new HashMap();   
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-Line Manager Approval");  
        String emailId = null;
                
        if (emailTemplate != null) {
            try{
        
        	if(requesterEmailId !=null){
    		  emailId=requesterEmailId;
          }
          
          if(newUserrequesterEmailId !=null){
    		  emailId=newUserrequesterEmailId;
          }
                      
          if(servicerequesterEmailIdofExestinguser !=null){
    		  emailId=servicerequesterEmailIdofExestinguser;
          }     
          
          if(servicerequesterEmailId !=null){
    		  emailId=servicerequesterEmailId;
          }            
        
        			toAddresses.add(emailId);          			        			
                                            
        			variables.put("identityName",launcher);
        			variables.put("selectingAccount",selectingAccount);            			
        
              EmailOptions ops = new EmailOptions(toAddresses, variables);
        			ops.setCc(Util.listToCsv(ccList));
              
           //   context.sendEmailNotification(emailTemplate, ops);
            }
            catch(Exception e){
              throw new GeneralException(e);
            }
        }
    </Source>
    </Script>
    <Transition to="Infra Consern Person Information" />
  </Step>
  <Step icon="Default" name="Infra Consern Person Information" posX="904" posY="10">
    <Script>
      <Source>
        import sailpoint.object.Identity;
                              
        if(launcher!=null){      
     	  wfcontext.setVariable("infraPersonApprover","42740");
        wfcontext.setVariable("infraPersonApproverEmail","mhelnagar@americana-food.com");                       
        }
        else{
        wfcontext.setVariable("infraPersonApprover","spadmin");        
        }                 
      </Source>
    </Script>
    <Transition to="Send Email To Infra Person Approver" />
  </Step>
  <Step icon="Task" name="Send Email To Infra Person Approver">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
				import sailpoint.object.*;
        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        
         HashMap variables = new HashMap();        
        
        if (emailTemplate != null) {
       
				toAddresses.add(infraPersonApproverEmail);
                
        variables.put("identityName",launcher);      
				variables.put("selectingAccount",selectingAccount);       		
        
        EmailOptions ops = new EmailOptions(toAddresses, variables);
              
     //   context.sendEmailNotification(emailTemplate, ops);
            }
    </Source>
    </Script>
    <Transition to="Infra Consern Person Approval" />
  </Step>
  <Step icon="Default" name="Infra Consern Person Approval" posX="448" posY="36">
    <Approval name="Infra Consern Person Approval" owner="ref:launcher" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion,azureADLicenses">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();


          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()&gt;0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);

          }
          }
          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);

          wfcontext.setVariable("approvalSet", approvalSet); 
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);             
        </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Second Level Approval - Infrastructure" />
      <Arg name="workItemDescription" value="Second Level Approval - Infrastructure" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="domainGroup" value="ref:domainGroup" />
      <Arg name="selectRegion" value="ref:selectRegion" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
    </Approval>
    <Transition to="Send Email Notification for Infra Consern Approval" when="approved" />
    <Transition to="Account Creation Rejection - Second Level" when="!approved" />
  </Step>
  <Step icon="Default" name="Account Creation Rejection - Second Level" posX="387" posY="20">
    <Approval name="Account Creation Rejection - Second Level" owner="ref:launcher" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt,azureADLicenses">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();

          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()&gt;0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);
          wfcontext.setVariable("approvalSet", approvalSet); 
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Account Creation Rejection Form" />
      <Arg name="workItemDescription" value="Account Creation Rejection Form" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="domainGroup" value="ref:domainGroup" />
      <Arg name="selectRegion" value="ref:selectRegion" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
      <Arg name="rejectCmt" value="ref:rejectCmt" />
    </Approval>
    <Transition to="Send Rejection Email" />
  </Step>
  <Step icon="Task" name="Send Email Notification for Infra Consern Approval">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.*;        
        
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        
        ccList = Arrays.asList(infraPersonApproverEmail);
        
        HashMap variables = new HashMap();   
        
        System.out.println("Inside Send Email Notification for Infra Consern Approval");
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-Infra Consern Approval");  
        String emailId = null;
        
        if (emailTemplate != null) {
            try{
        
        	if(requesterEmailId !=null){
    		  emailId=requesterEmailId;
          }
          
          if(newUserrequesterEmailId !=null){
    		  emailId=newUserrequesterEmailId;
          }
                      
          if(servicerequesterEmailIdofExestinguser !=null){
    		  emailId=servicerequesterEmailIdofExestinguser;
          }     
          
          if(servicerequesterEmailId !=null){
    		  emailId=servicerequesterEmailId;
          }          
        			toAddresses.add(emailId);          			
        			toAddresses.add(infraPersonApproverEmail);
                                            
        			variables.put("identityName",launcher);
        			variables.put("selectingAccount",selectingAccount);       
        
              EmailOptions ops = new EmailOptions(toAddresses, variables);
        			ops.setCc(Util.listToCsv(ccList));
              
            //  context.sendEmailNotification(emailTemplate, ops);
            }
            catch(Exception e){
              throw new GeneralException(e);
            }
        }
    </Source>
    </Script>
    <Transition to="Send Email To Third Level Approver" />
  </Step>
  <Step icon="Task" name="Send Email To Third Level Approver">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
				import sailpoint.object.*;
        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        
         HashMap variables = new HashMap();        
        
        if (emailTemplate != null) {
       
				toAddresses.add("gperdikouris@americana-food.com");
               
        variables.put("identityName",launcher);  
				variables.put("selectingAccount",selectingAccount);       		
        
        EmailOptions ops = new EmailOptions(toAddresses, variables);
              
    //    context.sendEmailNotification(emailTemplate, ops);
            }
    </Source>
    </Script>
    <Transition to="Third Level Approvals" />
  </Step>
  <Step icon="Default" name="Third Level Approvals" posX="448" posY="36">
    <Approval name="Third Level Approvals" owner="ref:launcher" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion,azureADLicenses">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();

          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()&gt;0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);
          wfcontext.setVariable("approvalSet", approvalSet); 
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Third Level Approval - Director" />
      <Arg name="workItemDescription" value="Third Level Approval - Director" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="domainGroup" value="ref:domainGroup" />
      <Arg name="selectRegion" value="ref:selectRegion" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
    </Approval>
    <Transition to="Send Email Notification for Third Level Approval" when="approved" />
    <Transition to="Account Creation Rejection - Third Level" when="!approved" />
  </Step>
  <Step icon="Default" name="Account Creation Rejection - Third Level" posX="387" posY="20">
    <Approval name="Account Creation Rejection - Third Level" owner="ref:thirdLevelApprover" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt,azureADLicenses">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();

          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()&gt;0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);
          wfcontext.setVariable("approvalSet", approvalSet); 
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Account Creation Rejection Form" />
      <Arg name="workItemDescription" value="Account Creation Rejection Form" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="domainGroup" value="ref:domainGroup" />
      <Arg name="selectRegion" value="ref:selectRegion" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
      <Arg name="rejectCmt" value="ref:rejectCmt" />
    </Approval>
    <Transition to="Send Rejection Email" />
  </Step>
  <Step icon="Task" name="Send Email Notification for Third Level Approval">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.*;        
        
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        
        ccList = Arrays.asList(infraPersonApproverEmail);
        
        System.out.println("Inside Send Email Notification for Third Level Approval");
        
        HashMap variables = new HashMap();   
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-Third Level Approval");  
        String emailId = null;
        
        if (emailTemplate != null) {
            try{
        
        	if(requesterEmailId !=null){
    		  emailId=requesterEmailId;
          }
          
          if(newUserrequesterEmailId !=null){
    		  emailId=newUserrequesterEmailId;
          }
                      
          if(servicerequesterEmailIdofExestinguser !=null){
    		  emailId=servicerequesterEmailIdofExestinguser;
          }     
          
          if(servicerequesterEmailId !=null){
    		  emailId=servicerequesterEmailId;
          }          
        			toAddresses.add(emailId);          			
        			toAddresses.add(infraPersonApproverEmail);
                                            
        			variables.put("identityName",launcher);
        			variables.put("selectingAccount",selectingAccount);       
        
              EmailOptions ops = new EmailOptions(toAddresses, variables);
        			ops.setCc(Util.listToCsv(ccList));
              
            //  context.sendEmailNotification(emailTemplate, ops);
            }
            catch(Exception e){
              throw new GeneralException(e);
            }
        }
    </Source>
    </Script>
    <Transition to="Send Email To IT Head Approver">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
				  System.out.println("Inside Condition Check");
				  
				  if (domainGroup.contains("AMERICANA\\ServerLocalAdminGroup")){
					return true ; 
                  }                     
      </Source>
      </Script>
    </Transition>
    <Transition to="closeAR" />
  </Step>
  <Step icon="Task" name="Non Admin Accounts">
    <Transition to="Identity Creation Domain Account" when="approved">
      <Script>
        <Source>
                import sailpoint.tools.Util;                     
           	 
          		System.out.println("Inside Identity Creation Domain Account");
                  
                 if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("New User")){       
         
          				return true ; 
                  }
                      else{    
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Identity Creation Service Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Identity Creation Service Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("New User")){       
         
          				return true ;           
                  }
                      else{      
          
                  return false;          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Preparing Plan Domain Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Preparing Plan Domain Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("Existing User")){   
          	                    
          				return true ; 
          
                  }
                      else{     
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Preparing Plan Service Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Preparing Plan Service Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("Existing User")){   
         
          				return true ;           
                  }
                      else{    
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
  </Step>
  <Step icon="Task" name="Send Email To IT Head Approver">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
				import sailpoint.object.*;
        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        
         HashMap variables = new HashMap();        
        
        if (emailTemplate != null) {
       
				toAddresses.add("akrishna@americana-food.com");
        toAddresses.add("gperdikouris@americana-food.com");   
				toAddresses.add("vvaghela@americana-food.com");     		
                
        variables.put("identityName",launcher);      
				variables.put("selectingAccount",selectingAccount);       		
        
        EmailOptions ops = new EmailOptions(toAddresses, variables);
              
       // context.sendEmailNotification(emailTemplate, ops);
            }
    </Source>
    </Script>
    <Transition to="IT Head Approval" />
  </Step>
  <Step icon="Default" name="IT Head Approval" posX="448" posY="36">
    <Approval name="IT Head Level Approval" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion,azureADLicenses">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();

          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()&gt;0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);
          wfcontext.setVariable("approvalSet", approvalSet); 
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Fourth Level Approval - IT Head" />
      <Arg name="workItemDescription" value="Fourth Level Approval - IT Head" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="domainGroup" value="ref:domainGroup" />
      <Arg name="selectRegion" value="ref:selectRegion" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
      <OwnerScript>
        <Source>          
          import sailpoint.object.Identity;                           
          return "ITHeadApproval_WG";                 
        </Source>
      </OwnerScript>
    </Approval>
    <Transition to="Send Email Notification for Fourth Level Approval" when="approved" />
    <Transition to="Account Creation Rejection - Fourth Level" when="!approved" />
  </Step>
  <Step icon="Default" name="Account Creation Rejection - Fourth Level" posX="387" posY="20">
    <Approval name="Account Creation Rejection - Fourth Level" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,deptnTeam,newUserdeptnTeam,servicedeptnTeam,servicerequesterdeptnTeam,namedAccount,servicenamedAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,rejectCmt,azureADLicenses">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();

          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()&gt;0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);
          wfcontext.setVariable("approvalSet", approvalSet); 
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemForm" value="Account Creation Rejection Form" />
      <Arg name="workItemDescription" value="Account Creation Rejection Form" />
      <Arg name="selectingAccount" value="ref:selectingAccount" />
      <Arg name="userSelection" value="ref:userSelection" />
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount" />
      <Arg name="genericAccount" value="ref:genericAccount" />
      <Arg name="preferredAccountName" value="ref:preferredAccountName" />
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount" />
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName" />
      <Arg name="namedAccount" value="ref:namedAccount" />
      <Arg name="servicenamedAccount" value="ref:servicenamedAccount" />
      <Arg name="tempAccount" value="ref:tempAccount" />
      <Arg name="startDate" value="ref:startDate" />
      <Arg name="endDate" value="ref:endDate" />
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount" />
      <Arg name="startDateService" value="ref:startDateService" />
      <Arg name="endDateService" value="ref:endDateService" />
      <Arg name="requesterEmailId" value="ref:requesterEmailId" />
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount" />
      <Arg name="region" value="ref:region" />
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess" />
      <Arg name="justificationforAccess" value="ref:justificationforAccess" />
      <Arg name="requesterFirstName" value="ref:requesterFirstName" />
      <Arg name="requesterlastName" value="ref:requesterlastName" />
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId" />
      <Arg name="newuserRegion" value="ref:newuserRegion" />
      <Arg name="serverAccess" value="ref:serverAccess" />
      <Arg name="privilaged" value="ref:privilaged" />
      <Arg name="jstAccess" value="ref:jstAccess" />
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser" />
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount" />
      <Arg name="serviceregion" value="ref:serviceregion" />
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess" />
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess" />
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName" />
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName" />
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId" />
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion" />
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess" />
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged" />
      <Arg name="servicejstAccess" value="ref:servicejstAccess" />
      <Arg name="domainGroup" value="ref:domainGroup" />
      <Arg name="selectRegion" value="ref:selectRegion" />
      <Arg name="deptnTeam" value="ref:deptnTeam" />
      <Arg name="newUserdeptnTeam" value="ref:newUserdeptnTeam" />
      <Arg name="servicedeptnTeam" value="ref:servicedeptnTeam" />
      <Arg name="servicerequesterdeptnTeam" value="ref:servicerequesterdeptnTeam" />
      <Arg name="rejectCmt" value="ref:rejectCmt" />
      <OwnerScript>
        <Source>          
          import sailpoint.object.Identity;                           
          return "ITHeadApproval_WG";                 
        </Source>
      </OwnerScript>
    </Approval>
    <Transition to="Send Rejection Email" />
  </Step>
  <Step icon="Task" name="Send Email Notification for Fourth Level Approval">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.*;        
        
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        
        ccList = Arrays.asList(infraPersonApproverEmail);
        
        System.out.println("Inside Send Email Notification for Fourth Level Approval");
        
        HashMap variables = new HashMap();   
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-Fourth Level Approval");  
        String emailId = null;
        
        if (emailTemplate != null) {
            try{
        
        	if(requesterEmailId !=null){
    		  emailId=requesterEmailId;
          }
          
          if(newUserrequesterEmailId !=null){
    		  emailId=newUserrequesterEmailId;
          }
                      
          if(servicerequesterEmailIdofExestinguser !=null){
    		  emailId=servicerequesterEmailIdofExestinguser;
          }     
          
          if(servicerequesterEmailId !=null){
    		  emailId=servicerequesterEmailId;
          }          
        			toAddresses.add(emailId);          			        			
                                            
        			variables.put("identityName",launcher);
        			variables.put("selectingAccount",selectingAccount);       
        
              EmailOptions ops = new EmailOptions(toAddresses, variables);
        			ops.setCc(Util.listToCsv(ccList));
              
            //  context.sendEmailNotification(emailTemplate, ops);
            }
            catch(Exception e){
              throw new GeneralException(e);
            }
        }
    </Source>
    </Script>
    <Transition to="closeAR" />
  </Step>
  <Step icon="Default" name="closeAR" posX="289" posY="37">
    <Script>
      <Source>
        import sailpoint.object.*;
        import sailpoint.object.IdentityRequestItem;
        import sailpoint.object.TaskResult;
        import sailpoint.object.ApprovalItem.ProvisioningState;
        import sailpoint.object.WorkflowSummary.ApprovalSummary;

        IdentityRequest reqId =  context.getObjectByName(IdentityRequest.class,identityRequestId);
        String taskResultId = reqId.getTaskResultId();
        TaskResult objectByName = context.getObjectById(TaskResult.class,taskResultId);
        Object attribute = objectByName.getAttribute("workflowSummary");
        List apSList = attribute.getInteractions();
        for(ApprovalSummary apS : apSList){
        if(null ==  apS.getState()){
        apS.setEndDate(new Date());
        if(approved){
        apS.setState(sailpoint.object.WorkItem.State.Finished);
        }
        else {
        apS.setState(sailpoint.object.WorkItem.State.Rejected);
        }
        }
        }
        
        List reqItems =  reqId.getItems();
        for(IdentityRequestItem reqItem : reqItems){
        if(approved){
        reqItem.setProvisioningState(sailpoint.object.ApprovalItem.ProvisioningState.Finished);
        reqItem.setApprovalState(sailpoint.object.WorkItem.State.Finished);
        }
        else {
        reqItem.setApprovalState(sailpoint.object.WorkItem.State.Rejected);
        }
        }
        reqId.setApprovalSummaries(attribute.getInteractions());
        reqId.setCompletionStatus(IdentityRequest.CompletionStatus.Success);
        reqId.setExecutionStatus(IdentityRequest.ExecutionStatus.Completed);
        reqId.setState("End");
        context.saveObject(reqId);
        context.commitTransaction();
      </Source>
    </Script>
    <Transition to="Non Admin Accounts">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
				  System.out.println("Inside Condition Check");
				  
				  if (!domainGroup.contains("AMERICANA\\ServerLocalAdminGroup")){
					return true ; 
                  }                     
      </Source>
      </Script>
    </Transition>
    <Transition to="Identity Creation Domain Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Identity Creation Domain Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("New User")){       
         
          				return true ; 
                  }
                      else{    
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Identity Creation Service Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Identity Creation Service Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("New User")){       
         
          				return true ;           
                  }
                      else{      
          
                  return false;          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Preparing Plan Domain Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Preparing Plan Domain Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("Existing User")){   
          	                    
          				return true ; 
          
                  }
                      else{     
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Preparing Plan Service Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Preparing Plan Service Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("Existing User")){   
         
          				return true ;           
                  }
                      else{    
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
  </Step>
  <Step icon="Default" name="Preparing Plan Domain Account" posX="279" posY="35" resultVariable="plan">
    <Script>
      <Source>        
        import sailpoint.object.Application;
				import sailpoint.api.IdentityService;
        import sailpoint.object.Identity;
        import sailpoint.object.Custom;
        import sailpoint.object.Link;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.tools.GeneralException;
        import sailpoint.tools.Util;
        import sailpoint.object.ManagedAttribute;
        import java.util.*;
        import sailpoint.object.QueryOptions;
        import sailpoint.object.Filter;
        import sailpoint.object.*;
        
        Identity identity = null;       
        
		if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("Existing User")){  
    identity = context.getObjectByName(Identity.class, exestingAdminAccount);    
		wfcontext.setVariable("identityName", exestingAdminAccount);		
    }    
		ProvisioningPlan plan = new ProvisioningPlan();
    plan.setIdentity(identity);        
                   
    AccountRequest accountRequest = new AccountRequest();
    accountRequest.setApplication("Active Directory");     // pass application name        
        
		if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("United Arab Emirates")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");            
		}        
		if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Qatar")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}		
		if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Oman")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");       		        
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Bahrain")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Morocco")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Lebanon")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Iraq")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kuwait")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Jordan")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kazakhstan")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kingdom of Saudi Arabia")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
         if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Egypt")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
         if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("global")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
		
       accountRequest.setOperation(AccountRequest.Operation.Modify);       
       List GroupList = new ArrayList ();
	   /* Changes added as a part of admin account display name field */
	   if(null != domainGroup){
	   Filter domainGroupsFilter = Filter.and(Filter.eq("application.name","Active Directory"),Filter.in("displayName",domainGroup),Filter.eq("attribute","memberOf"));
        QueryOptions groupQueryoptions = new QueryOptions();
        groupQueryoptions.addFilter(domainGroupsFilter);
        groupQueryoptions.setCloneResults(true);
        List groupsToBeProvisioned = new ArrayList();
        Iterator maIterator = context.search(ManagedAttribute.class,groupQueryoptions,"value");
        while(maIterator.hasNext()){
        	Object[] objectArray = maIterator.next();
        	if(null != objectArray){
        		String groupName = objectArray[0];
        		if(null != groupName){
        			groupsToBeProvisioned.add(groupName);
        		}
        	}
        }
		Util.flushIterator(maIterator);
        GroupList.addAll(groupsToBeProvisioned);
		}
		/* Changes until above */
       //GroupList.addAll(domainGroup);       
        
      // accountRequest.add(new AttributeRequest("sAMAccountName", ProvisioningPlan.Operation.Set, identity.getName()));                            
       accountRequest.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,GroupList));	 // pass the Entitlements list      
       
       plan.add(accountRequest);        
       return plan;      					
  
        </Source>
    </Script>
    <Transition to="Initialize AR" />
  </Step>
  <Step icon="Default" name="Preparing Plan Service Account" posX="279" posY="35" resultVariable="plan">
    <Script>
      <Source>
        
        import sailpoint.object.Application;
				import sailpoint.api.IdentityService;
        import sailpoint.object.Identity;
        import sailpoint.object.Custom;
        import sailpoint.object.Link;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.tools.GeneralException;
        import sailpoint.tools.Util;
        import sailpoint.object.ManagedAttribute;
        import java.util.*;
        import sailpoint.object.QueryOptions;
        import sailpoint.object.Filter;
        import sailpoint.object.*;
        
        Identity identity = null;
      	        
      	if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("Existing User")){  
		    identity = context.getObjectByName(Identity.class, serviceexestingAdminAccount);   
    	 	wfcontext.setVariable("identityName", serviceexestingAdminAccount);		        
				}		
        
				ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(identity);        
                   
        AccountRequest accountRequest = new AccountRequest();
        accountRequest.setApplication("Active Directory");     // pass application name
        
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("United Arab Emirates")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");            
		}        
		if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Qatar")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}		
		if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Oman")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");       		        
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Bahrain")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Morocco")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Lebanon")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Iraq")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kuwait")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Jordan")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kazakhstan")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kingdom of Saudi Arabia")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}            
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Egypt")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("global")){
		accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
       accountRequest.setOperation(AccountRequest.Operation.Modify);
       
       List GroupList = new ArrayList ();
	   /* Changes added as a part of admin account display name field */
	   if(null != domainGroup){
	   Filter domainGroupsFilter = Filter.and(Filter.eq("application.name","Active Directory"),Filter.in("displayName",domainGroup),Filter.eq("attribute","memberOf"));
        QueryOptions groupQueryoptions = new QueryOptions();
        groupQueryoptions.addFilter(domainGroupsFilter);
        groupQueryoptions.setCloneResults(true);
        List groupsToBeProvisioned = new ArrayList();
        Iterator maIterator = context.search(ManagedAttribute.class,groupQueryoptions,"value");
        while(maIterator.hasNext()){
        	Object[] objectArray = maIterator.next();
        	if(null != objectArray){
        		String groupName = objectArray[0];
        		if(null != groupName){
        			groupsToBeProvisioned.add(groupName);
        		}
        	}
        }
		Util.flushIterator(maIterator);
		GroupList.addAll(groupsToBeProvisioned);
		}
		/* Changes until above */
       //GroupList.addAll(domainGroup);       
        
   //    accountRequest.add(new AttributeRequest("sAMAccountName", ProvisioningPlan.Operation.Set, identity.getName()));                       
       accountRequest.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,GroupList));	 // pass the Entitlements list
       
	     plan.add(accountRequest);
        
        return plan;
		
        </Source>
    </Script>
    <Transition to="Initialize AR" />
  </Step>
  <Step icon="Task" name="Initialize AR" posX="183" posY="12">
    <Arg name="flow" value="Account Creation" />
    <Arg name="identityName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");   // pass identity name   
      </Source>
      </Script>
    </Arg>
    <Arg name="identityDisplayName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");   // pass identity name   
      </Source>
      </Script>
    </Arg>
    <Arg name="launcher" value="ref:launcher" />
    <Arg name="optimisticProvisioning" value="false" />
    <Arg name="plan" value="ref:plan" />
    <Arg name="source" value="ref:source" />
    <Arg name="trace" value="ref:trace" />
    <Description>
      Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into
      a project and checking policy violations.
    </Description>
    <Return name="identityRequestId" to="identityRequestId" />
    <Return name="project" to="project" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize" />
    </WorkflowRef>
    <Transition to="Provision" />
  </Step>
  <Step icon="Task" name="Provision" posX="516" posY="126">
    <Arg name="approvalScheme" value="none" />
    <Arg name="identity">
      <Script>
        <Source>
    return wfcontext.getVariable("identityName");
          
      </Source>
      </Script>
    </Arg>
    <Arg name="fallbackApprover" value="ref:fallbackApprover" />
    <Arg name="requestType" value="ref:requestType" />
    <Arg name="approvalSet" />
    <Arg name="flow" value="Account Creation" />
    <Arg name="project" value="ref:project" />
    <Arg name="policyScheme" value="string:none" />
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning" />
    <Arg name="identityName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");   // pass identity name   
      </Source>
      </Script>
    </Arg>
    <Arg name="identityDisplayName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");          
      </Source>
      </Script>
    </Arg>
    <Arg name="trace" value="ref:trace" />
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning" />
    <Arg name="plan" />
    <Arg name="flow" value="ref:flow" />
    <Arg name="launcher" value="ref:launcher" />
    <Description>Call the standard subprocess that will process the 
        approval decisions and do provisioning.  This 
        includes calling any configured provisioning 
        connectors and building manual actions.</Description>
    <Return name="project" to="project" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Provision" />
    </WorkflowRef>
    <Transition to="Complete Identity Request" />
  </Step>
  <Step icon="Task" name="Complete Identity Request" posX="410" posY="10">
    <Arg name="approvalSet" value="ref:approvalSet" />
    <Arg name="identity">
      <Script>
        <Source>
   				return wfcontext.getVariable("identityName");         
      </Source>
      </Script>
    </Arg>
    <Arg name="identityName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");          
      </Source>
      </Script>
    </Arg>
    <Arg name="project" value="ref:project" />
    <Arg name="priority" value="ref:workItemPriority" />
    <Arg name="trace" value="ref:trace" />
    <Arg name="identityRequestId" value="ref:identityRequestId" />
    <Description>
        Call the standard subprocess that can audit/finalize the request.</Description>
    <Return name="identityRequestId" to="identityRequestId" />
    <Return name="identityRequest" to="identityRequest" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Finalize" />
    </WorkflowRef>
    <Transition to="Update Domain Account Send Email Notification">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Identity Update Domain Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("Existing User")){       
         
          				return true ; 
                  }

                      else{     
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Update Service Account Send Email Notification">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Identity Update Service Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("Existing User")){   
         
          				return true ; 
                  }

                      else{     
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
  </Step>
  <Step icon="Task" name="Update Domain Account Send Email Notification">
    <Script>
      <Source>
        import java.util.HashMap;
        import java.util.Map;

        import sailpoint.object.EmailTemplate;
        import sailpoint.object.Custom;
        import sailpoint.tools.Util; 
        import sailpoint.object.EmailOptions;			
                      
        EmailTemplate template =context.getObjectByName(EmailTemplate.class, "Domain Account Update Details Notification");
        List toAddresses=new ArrayList();        
        List ccList = new ArrayList();
        
        ccList = Arrays.asList(infraPersonApproverEmail,requesterEmailId);
        
        HashMap variables = new HashMap();            
        
        if (template != null) {             
                    
        toAddresses.add("rkumar@americana-food.com");
        toAddresses.add("skurian@americana-food.com");     
        
        variables.put("selectingAccount",selectingAccount);
        variables.put("userSelection",userSelection);        
        variables.put("requesterEmailId",requesterEmailId);
        variables.put("launcher",launcher);
                
        variables.put("requestforServerAccess",requestforServerAccess);       
        variables.put("domainGroup",domainGroup);   
        variables.put("identityName",identityName);     
   	
        EmailOptions ops = new EmailOptions(toAddresses, variables);        
        ops.setCc(Util.listToCsv(ccList));
        
       // context.sendEmailNotification(template, ops);        
        }                  
        
      </Source>
    </Script>
    <Transition to="Stop" />
  </Step>
  <Step icon="Task" name="Update Service Account Send Email Notification">
    <Script>
      <Source>
        import java.util.HashMap;
        import java.util.Map;

        import sailpoint.object.EmailTemplate;
        import sailpoint.object.Custom;
        import sailpoint.tools.Util; 
        import sailpoint.object.EmailOptions;			
                      
        EmailTemplate template =context.getObjectByName(EmailTemplate.class, "Service Account Update Details Notification");
        
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        
        ccList = Arrays.asList(infraPersonApproverEmail,servicerequesterEmailId);
        
        HashMap variables = new HashMap();            
        
        if (template != null) {             
                    
        toAddresses.add("rkumar@americana-food.com");
        toAddresses.add("skurian@americana-food.com");     
        
        variables.put("selectingAccount",selectingAccount);
        variables.put("userSelectionforServiceAccount",userSelectionforServiceAccount);
        variables.put("servicerequesterEmailId",servicerequesterEmailId);
        variables.put("launcher",launcher);
                
        variables.put("servicerequestforServerAccess",servicerequestforServerAccess);       
        variables.put("domainGroup",domainGroup);   
        variables.put("identityName",identityName);     
   	
        EmailOptions ops = new EmailOptions(toAddresses, variables);
        ops.setCc(Util.listToCsv(ccList));
        
        context.sendEmailNotification(template, ops);        
        }                  
        
      </Source>
    </Script>
    <Transition to="Stop" />
  </Step>
  <Step icon="Task" name="Domain Account Send Email Notification">
    <Script>
      <Source>
        import java.util.HashMap;
        import java.util.Map;

        import sailpoint.object.EmailTemplate;
        import sailpoint.object.Custom;
        import sailpoint.tools.Util; 
        import sailpoint.object.EmailOptions;
                      
        EmailTemplate template =context.getObjectByName(EmailTemplate.class, "Domain Account Creation Details Notification");
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        
        ccList = Arrays.asList(infraPersonApproverEmail,newUserrequesterEmailId);
        
        HashMap variables = new HashMap();   
        
        if (template != null) {             
                    
        toAddresses.add("rkumar@americana-food.com");
        toAddresses.add("skurian@americana-food.com");     
        
        variables.put("accountType",accountType);
        variables.put("userSelection",userSelection);        
        variables.put("requesterFirstName",requesterFirstName);
        variables.put("requesterlastName",requesterlastName);
        variables.put("newUserrequesterEmailId",newUserrequesterEmailId);         
        
        variables.put("serverAccess", serverAccess);        
        variables.put("genericAccount",genericAccount);
        variables.put("displayName",requestedAccountName);
        variables.put("domainGroup",domainGroup);   
        variables.put("identityName",launcher);     
   	
        EmailOptions ops = new EmailOptions(toAddresses, variables);
        ops.setCc(Util.listToCsv(ccList));

     //   context.sendEmailNotification(template, ops); 
        }      
        
      </Source>
    </Script>
    <Transition to="Stop" />
  </Step>
  <Step icon="Task" name="Service Account Send Email Notification">
    <Script>
      <Source>

        import java.util.HashMap;
        import java.util.Map;

        import sailpoint.object.EmailTemplate;
        import sailpoint.object.Custom;
        import sailpoint.tools.Util; 
        import sailpoint.object.EmailOptions;
                      
        EmailTemplate template =context.getObjectByName(EmailTemplate.class, "Service Account Creation Details Notification");
        List toAddresses=new ArrayList();
        
        List ccList = new ArrayList();
        ccList = Arrays.asList(infraPersonApproverEmail,servicerequesterEmailId);
        
        HashMap variables = new HashMap();    
        
        
        if (template != null) {             
                    
        toAddresses.add("rkumar@americana-food.com");
        toAddresses.add("skurian@americana-food.com");     
        
        variables.put("accountType",accountType);
        variables.put("userSelectionforServiceAccount",userSelectionforServiceAccount);        
        variables.put("servicerequesterFirstName",servicerequesterFirstName);
        variables.put("servicerequesterlastName",servicerequesterlastName);
        variables.put("servicerequesterEmailId",servicerequesterEmailId);
                
        variables.put("serviceserverAccess",serviceserverAccess);                
        variables.put("servicegenericAccount",servicegenericAccount);
        variables.put("displayName",requestedAccountName);
        variables.put("domainGroup",domainGroup);      
        variables.put("identityName",launcher);     
   	
        EmailOptions ops = new EmailOptions(toAddresses, variables);
        ops.setCc(Util.listToCsv(ccList));        

     //   context.sendEmailNotification(template, ops);  
        }                   
      </Source>
    </Script>
    <Transition to="Stop" />
  </Step>
  <Step icon="Default" name="Identity Creation Domain Account" posX="279" posY="35" resultVariable="identityName">
    <Script>
      <Source>
        
	import sailpoint.object.Identity;
    import java.util.*;
    import java.util.Date;
    import java.text.DateFormat;
    import java.text.SimpleDateFormat;    
        
	String displayName = null;
        
    Identity id=new Identity();    
        
    String descriptionInAD = privilaged+","+jstAccess;
    wfcontext.setVariable("descriptionInAD",descriptionInAD);       
    wfcontext.setVariable("firstName",requesterFirstName);
  	wfcontext.setVariable("lastName",requesterlastName); 
    id.setFirstname(requesterFirstName);
    id.setLastname(requesterlastName);      
    id.setManager(managerID);  
    id.setAttribute("userType","Domain Account");     
        
    if (tempAccount !=null &amp;&amp; tempAccount.equalsIgnoreCase("true")){
    DateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
    startDate = dateFormat.format(startDate);      
    id.setAttribute("startDate",startDate);      
    endDate = dateFormat.format(endDate);          
    id.setAttribute("endDate",endDate);
    }      
          
    if (selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; genericAccount.equalsIgnoreCase("Generic")){       
        displayName = preferredAccountName;
        id.setDisplayName(displayName);
        id.setName(displayName);   
        id.setAttribute("adLogOnName",displayName);
        wfcontext.setVariable("accountType","Domain Account - Generic");    
        }    
      
    if (selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; genericAccount.equalsIgnoreCase("Named")){  
         displayName = namedAccount;       
         id.setDisplayName(displayName);
         id.setName(displayName);     
        id.setAttribute("adLogOnName",displayName);
         wfcontext.setVariable("accountType","Domain Account - Named");    
		}
        wfcontext.setVariable("requestedAccountName",displayName); 
        context.saveObject(id);
        context.commitTransaction();
        
        identityName = id.getName();        
                    	
				return id.getName();
       
        </Source>
    </Script>
    <Transition to="Account Provision Plan" />
  </Step>
  <Step icon="Default" name="Identity Creation Service Account" posX="279" posY="35" resultVariable="identityName">
    <Script>
      <Source>
        
		import sailpoint.object.Identity;
    import java.util.*;
    import java.util.Date;
    import java.text.DateFormat;
    import java.text.SimpleDateFormat;
	import sailpoint.object.Custom;
       
		String displayName = null;
    
    Identity id=new Identity();
    
    String descriptionInAD = serviceprivilaged+","+servicejstAccess;    
    wfcontext.setVariable("descriptionInAD",descriptionInAD);       
    wfcontext.setVariable("firstName",servicerequesterFirstName);
  	wfcontext.setVariable("lastName",servicerequesterlastName); 
    id.setFirstname(servicerequesterFirstName);
    id.setLastname(servicerequesterlastName);
    id.setManager(managerID);  
    id.setAttribute("userType","Service Account");      
	
	/* Changers for the azure license */    
    if(void != servicenewuserRegion @and null != servicenewuserRegion @and !"".equalsIgnoreCase(servicenewuserRegion)){
        Custom customObj = context.getObjectByName(Custom.class,"Americana-Account-Attributes");
        if(null != customObj){
        Map countrycodes = customObj.get("CountryCode");
        if(null != countrycodes){
        	String countryCode = countrycodes.get(servicenewuserRegion);
        	if(null != countryCode @and !"".equalsIgnoreCase(countryCode)){
        		id.setAttribute("country",countryCode);      
        	}
        }
        }
    }    
     /* changes until above */   
        
    if (tempServiceAccount !=null &amp;&amp; tempServiceAccount.equalsIgnoreCase("true")){           
	  DateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
    startDateService = dateFormat.format(startDateService);      
    id.setAttribute("startDate",startDateService);     
    endDateService = dateFormat.format(endDateService);          
    id.setAttribute("endDate",endDateService);
    } 
     
    if (selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; servicegenericAccount.equalsIgnoreCase("Generic")){    
		 displayName = servicepreferredAccountName;    
         id.setDisplayName(displayName);
         id.setName(displayName);     
		id.setAttribute("adLogOnName",displayName);
         wfcontext.setVariable("accountType","Service Account - Generic");    
        }
        
    if (selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; servicegenericAccount.equalsIgnoreCase("Named")){        
		 displayName = servicenamedAccount;
         id.setDisplayName(displayName);
         id.setName(displayName);  
		 id.setAttribute("adLogOnName",displayName);
         wfcontext.setVariable("accountType","Service Account - Named");    
		}
                
		wfcontext.setVariable("requestedAccountName",displayName); 				
        context.saveObject(id);
        context.commitTransaction();
        
        identityName = id.getName();
                           	
		return id.getName();
       
        </Source>
    </Script>
    <Transition to="Account Provision Plan" />
  </Step>
  <Step icon="Default" name="Account Provision Plan" posX="289" posY="37" resultVariable="plan">
    <Script>
      <Source>
        
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.*;

        import sailpoint.api.Provisioner;
        import sailpoint.api.*;

        import sailpoint.api.PasswordGenerator;
        import sailpoint.object.PasswordPolicy;
        import sailpoint.tools.Util;
		import jsva.util.*;
		


        String policyName = "Americana-AD-PasswordPolicy";
        PasswordPolicy policyAD = context.getObjectByName(PasswordPolicy.class, policyName);
        String   password = new PasswordGenerator(context).generatePassword(policyAD);
        
        policyAD = null;
             
                    
		    Identity identityProvAct = null;		
               
        identityProvAct = context.getObjectByName(Identity.class, identityName);       
        wfcontext.setVariable("identityName", identityProvAct.getName());		        
        
		    ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(identityProvAct);        
                   
        AccountRequest accountRequestProv = new AccountRequest();
        accountRequestProv.setApplication("Active Directory");     // pass application name
		
        accountRequestProv.setOperation(AccountRequest.Operation.Create);
		
		  String displayName = null;
        
    if (null != selectingAccount &amp;&amp; "Domain Account".equalsIgnoreCase(selectingAccount)) {
		
		if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("United Arab Emirates")){
		displayName = identityProvAct.getName();
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");            
		}        
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Qatar")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Oman")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Bahrain")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Morocco")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Lebanon")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Iraq")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kuwait")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Jordan")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kazakhstan")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kingdom of Saudi Arabia")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
         if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Egypt")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("global")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=AMD ADMINS,OU=Americana Office,DC=Americana,DC=global");          
		}
    
    }
    else if (null != selectingAccount &amp;&amp; "Service Account".equalsIgnoreCase(selectingAccount)) {
		
		if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("United Arab Emirates")){
		displayName = identityProvAct.getName();
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");            
		}        
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Qatar")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Oman")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Bahrain")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Morocco")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Lebanon")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Iraq")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kuwait")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Jordan")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kazakhstan")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Kingdom of Saudi Arabia")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
         if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Egypt")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("global")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Service Accounts,OU=UAE-Office,OU=Americana Office,DC=Americana,DC=global");          
		}
    
  }
		    accountRequestProv.add(new AttributeRequest("givenName", ProvisioningPlan.Operation.Add, firstName));
        accountRequestProv.add(new AttributeRequest("sn", ProvisioningPlan.Operation.Add, lastName));
        accountRequestProv.add(new AttributeRequest("sAMAccountName", ProvisioningPlan.Operation.Add, displayName));        
        accountRequestProv.add(new AttributeRequest("password", ProvisioningPlan.Operation.Add, password));
        if(null != firstName @and !"".equalsIgnoreCase(firstName) @and null != lastName @and !"".equalsIgnoreCase(lastName)){
        	String updatedDisplayName = firstName+" "+lastName;
        	accountRequestProv.add(new AttributeRequest("displayName", ProvisioningPlan.Operation.Add,  updatedDisplayName));        
        }else{
        	accountRequestProv.add(new AttributeRequest("displayName", ProvisioningPlan.Operation.Add,  displayName));        
        }      
        accountRequestProv.add(new AttributeRequest("description", ProvisioningPlan.Operation.Add, descriptionInAD));  
        accountRequestProv.add(new AttributeRequest("mail", ProvisioningPlan.Operation.Set, identityProvAct.getName()+"@americana-food.com" ));
        accountRequestProv.add(new AttributeRequest("userPrincipalName", ProvisioningPlan.Operation.Set, identityProvAct.getName()+"@americana-food.com" ));
        
                     
        List GroupList = new ArrayList ();
		/* Changes added as a part of admin account display name field */
		if(null != domainGroup){
	   Filter domainGroupsFilter = Filter.and(Filter.eq("application.name","Active Directory"),Filter.in("displayName",domainGroup),Filter.eq("attribute","memberOf"));
        QueryOptions groupQueryoptions = new QueryOptions();
        groupQueryoptions.addFilter(domainGroupsFilter);
        groupQueryoptions.setCloneResults(true);
        List groupsToBeProvisioned = new ArrayList();
        Iterator maIterator = context.search(ManagedAttribute.class,groupQueryoptions,"value");
        while(maIterator.hasNext()){
        	Object[] objectArray = maIterator.next();
        	if(null != objectArray){
        		String groupName = objectArray[0];
        		if(null != groupName){
        			groupsToBeProvisioned.add(groupName);
        		}
        	}
        }
		Util.flushIterator(maIterator);
        GroupList.addAll(groupsToBeProvisioned);
		}
		/* Changes until above */
        //GroupList.addAll(domainGroup);               
                          
        accountRequestProv.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,GroupList));	 // pass the Entitlements list
                  
        plan.add(accountRequestProv);
        
        return plan;  
        </Source>
    </Script>
    <Transition to="provisionLCM" />
  </Step>
  <Step icon="Default" name="provisionLCM" posX="444" posY="10">
    <Arg name="approvalScheme" value="none" />
    <Arg name="identityName" value="ref:identityName" />
    <Arg name="plan" value="ref:plan" />
    <Arg name="flow" value="ref:flow" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="LCM Provisioning" />
    </WorkflowRef>
    <Transition to="Domain Account Send Email Notification">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
				  if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("New User")){       
         
          				return true ; 
                  }

                      else{                      
                  return false;
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Schedule AzureAD License Assignment Workflow">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("New User")){       
         
          				return true ; 
                  }

                      else{                      
                  return false;
                  }
      </Source>
      </Script>
    </Transition>
  </Step>
  <Step icon="Task" name="Send Rejection Email">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.*;        
        
        List toAddresses=new ArrayList();
        List ccList = new ArrayList();
        HashMap variables = new HashMap();   
        
        ccList = Arrays.asList(infraPersonApproverEmail);
        System.out.println("Inside Send Rejection Email");
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-Rejection Email");  
        String emailId = null;
        String reqAccountName = null;   
        String rejectComment = null;
        
        if (emailTemplate != null) {
            try{
        
        	if(requesterEmailId !=null){
    		  emailId=requesterEmailId;
          }
          
          if(newUserrequesterEmailId !=null){
    		  emailId=newUserrequesterEmailId;
          }
                      
          if(servicerequesterEmailIdofExestinguser !=null){
    		  emailId=servicerequesterEmailIdofExestinguser;
          }     
          
          if(servicerequesterEmailId !=null){
    		  emailId=servicerequesterEmailId;
          }  
        
        		if (namedAccount != null){
        System.out.println("Inside Named Account :: "+namedAccount);
         reqAccountName= namedAccount;
        }
        
         if (servicenamedAccount != null){
        System.out.println("Inside Service Named Account :: "+servicenamedAccount);
        	reqAccountName=servicenamedAccount;
        }
        
         if (preferredAccountName != null){
        System.out.println("Inside Preferred Account Name :: "+preferredAccountName);
         reqAccountName=preferredAccountName;
        }
        
         if (servicepreferredAccountName != null){
        System.out.println("Inside Service Preferred Account Name :: "+servicepreferredAccountName);
        	reqAccountName=servicepreferredAccountName;
        }   
        
        if (rejectCmt !=null){
        	rejectComment=rejectCmt;
        }
		
        			toAddresses.add(emailId);   
        
        			variables.put("identityName",launcher);
        			variables.put("selectingAccount",selectingAccount);         
        			variables.put("requestedAccountName",reqAccountName);  
        			variables.put("rejectComment",rejectComment);	
        
              EmailOptions ops = new EmailOptions(toAddresses, variables);
        			ops.setCc(Util.listToCsv(ccList));
              
         //     context.sendEmailNotification(emailTemplate, ops);
            }
            catch(Exception e){
              throw new GeneralException(e);
            }
        }
    </Source>
    </Script>
    <Transition to="Stop" />
  </Step>
  <Step icon="Task" name="Schedule AzureAD License Assignment Workflow">
    <Description>
      Schedule workflow 'Americana-Workflow-AzureADLicenseAssignment' to launch after 35 minutes, as Active Directity to Azure Sync job is scheduled for every 30 minutes
    </Description>
    <Script>
      <Source>

        import java.util.Date;

        import sailpoint.api.RequestManager;
        import sailpoint.object.Attributes;
        import sailpoint.object.Identity;
        import sailpoint.object.Request;
        import sailpoint.object.RequestDefinition;
        import sailpoint.object.Workflow;
        import sailpoint.tools.GeneralException;
        import sailpoint.workflow.StandardWorkflowHandler;

        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;


        Logger logger = Logger.getLogger("Americana.Workflow.LifecycleEvent.Joiner.Step.ScheduleAzureADLicenseAssignmentWorkflow");
        logger.setLevel(Level.DEBUG);

        logger.debug("Start Step.ScheduleAzureADLicenseAssignmentWorkflow");


        String workflowName = "Americana-Workflow-AzureADLicenseAssignment";
        String caseName     = "Run '" + workflowName + "' for: " + identityName;
        String requesterId  = "spadmin";

        Workflow eventWorkflow = context.getObject(Workflow.class, workflowName);
        if (null == eventWorkflow) {
        logger.error("Could not find a workflow named: " + workflowName);
        throw new GeneralException("Invalid worklfow: " + workflowName);
        }

        // Simulate the request being submitted by a user. Default: spadmin.
        Identity id = context.getObjectByName(Identity.class, requesterId);
        if (null == id) {
        logger.error("Could not find a requester Identity: " + requesterId);
        throw new GeneralException("Invalid identity: " + requesterId);
        }

        // Ask the Request Processor to start the workflow 35 minutes from now.
        // Append the time stamp to the workflow case name to ensure it's unique. 
        long launchTime = System.currentTimeMillis() + (35 * 60 * 1000);
        caseName = caseName + "(" + launchTime + ")";

        // Build out a map of arguments to pass to the Request Scheduler.
        Attributes reqArgs = new Attributes();
        reqArgs.put(StandardWorkflowHandler.ARG_REQUEST_DEFINITION, sailpoint.request.WorkflowRequestExecutor.DEFINITION_NAME);
        reqArgs.put(sailpoint.workflow.StandardWorkflowHandler.ARG_WORKFLOW, workflowName);
        reqArgs.put(sailpoint.workflow.StandardWorkflowHandler.ARG_REQUEST_NAME, caseName);
        reqArgs.put( "requestName", caseName );            

        // Build a map of arguments to pass to the Workflow case when it launches.
        Attributes wfArgs = new Attributes();
        wfArgs.put("identityName",    identityName);
        wfArgs.put("workflow",        eventWorkflow.getName());
        wfArgs.put("strLicenseNameFromWorkflow",azureADLicenses);

        reqArgs.putAll(wfArgs);

        // Use the Request Launcher to schedule the workflow reqeust.  This requires
        // a Request object to store the properties of the request item.
        Request req = new Request();
        RequestDefinition reqdef = context.getObject(RequestDefinition.class, "Workflow Request");
        req.setDefinition(reqdef);
        req.setEventDate( new Date( launchTime ) );
        req.setOwner(id);
        req.setName(caseName);
        req.setAttributes( reqdef, reqArgs );

        // Schedule the work flow via the request manager.
        RequestManager.addRequest(context, req);

        logger.debug("End Step.ScheduleAzureADLicenseAssignmentWorkflow");
      </Source>
    </Script>
    <Transition to="Service Account Send Email Notification" />
  </Step>
</Workflow>

</sailpoint>