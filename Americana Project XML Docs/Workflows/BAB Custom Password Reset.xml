<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Workflow explicitTransitions="true" libraries="Identity,LCM" name="BAB Custom Password Reset">
  <Variable initializer="true" name="transient">
    <Description>Set to false to cause workflow-related objects, such as approval

      work items, to be saved in the database even if they are only

      viewed by the person registering.</Description>
  </Variable>
  <Variable initializer="true" name="trace">
    <Description>enable this to see stuff spit out to stdout</Description>
  </Variable>
  <Variable name="requesterDisplayName" />
  <Variable input="true" name="launcher" />
  <Variable name="appId" type="string">
    <Description>The application id for the app we&amp;#39;re creating groups on</Description>
  </Variable>
  <Variable name="readOnlyForm">
    <Description>Read only form for confirmation dialog.</Description>
  </Variable>
  <Variable initializer="AccountsRequest" name="flow" />
  <Variable initializer="Password Reset Internal" name="passwordresetinternal">
    <Description>The name of the form used by this request process</Description>
  </Variable>
  <Variable name="identityName">
    <Description>identityName</Description>
  </Variable>
  <Variable initializer="serial" input="true" name="approvalMode">
    <Description>A string that specifies how we should handle the approvals. 



      By default this is serial since most of these request with

      the exception of manager transfers will have only one approver.



      parallel

      Approvals are processed concurrently and there must be consensus,

      we wait for all approvers to approve.  The first approver that

      rejects terminates the entire approval.



      parallelPoll

      Approvals are processed concurrently but consensus is not required.

      All approvals will be process, we don&amp;#39;t stop if there any

      rejections. 



      serial

      Approvals are processed one at a time and there must be consensus.

      The first approver that rejects terminates the entire approval.



      serialPoll

      Approvals are processed in order but consensus is not required.

      All approvals will be processed, we don&amp;#39;t stop if there are any

      rejections.  In effect we are &amp;quot;taking a poll&amp;quot; of the approvers.



      any

      Approvals are processed concurrently, the first approver to

      respond makes the decision for the group.</Description>
  </Variable>
  <Variable initializer="none" input="true" name="approvalScheme">
    <Description>A csv string that specifies how approvals should be generated for

      the incoming request.



      The value can be any of the values below, combined together but

      are always processed in this order:



      1. manager

      2. owner

      3. securityOfficer



      Any rejected items from previous approvals will be omitted from the 

      next phase of approvers.



      none - disabled approvals



      owner - the object owner gets the approval

      For Role approvals this is the Role object owner. When dealing

      with things like Unlock and other account level changes

      the approvals will be assigned to the the application owner.



      manager - The manager will get all approvals



      securityOfficer - The identity named security the security in the variable

      securityOfficerName.</Description>
  </Variable>
  <Variable name="approvingIdentities">
    <Description>approvingIdentities</Description>
  </Variable>
  <Variable initializer="continue" input="true" name="policyScheme">
    <Description>A String that specifies how policy checks effect the overall

      process.



      none - disabled policy checking



      continue -  continue if policy violations are found



      interactive -  allow requester to remove request items which are causing violations



      fail -  this option will cause the workflow to terminate immediately if any policy violations are found.

      Note that the requester will not be notified that the workflow has terminated.</Description>
  </Variable>
  <Variable initializer="user,requester" input="true" name="notificationScheme">
    <Description>A string that specifies who should be notified when the request has been complete.

      The value can be null or a csv of one or more of the following options.



      none or null

      disable notifications



      user

      Identity that is being update will be notified.



      manager

      The manager of the Identity that is being updated will be notified.



      requester

      The person that has requested the update will be notified.</Description>
  </Variable>
  <Variable editable="true" name="doRefresh">
    <Description>Set to true to cause an identity refresh after the changes in the plan

      have been provisioned.  This is normally off, you might want this on

      if you want modification of identity or link attributes to result in

      an immediate re-evaluation of assigned and detected roles.</Description>
  </Variable>
  <Variable name="exitWorkflow">
    <Description>Value posted by the &amp;quot;Exit Workflow&amp;quot; form button, to indicate the workflow should end.

      This is somethign handled in transitions on Approvals that have forms and gives

      a way for customers to exit the workflow.</Description>
  </Variable>
  <Variable name="groupModel" />
  <Variable name="plan" />
  <Variable name="formModel" />
  <Variable initializer="true" name="transient">
    <Description>Set to false to cause workflow-related objects, such as approval

      work items, to be saved in the database even if they are only

      viewed by the person registering.</Description>
  </Variable>
  <Variable initializer="true" name="trace">
    <Description>enable this to see stuff spit out to stdout</Description>
  </Variable>
  <Variable name="requesterDisplayName" />
  <Variable name="appId">
    <Description>The application id for the app we&amp;#39;re creating groups on</Description>
  </Variable>
  <Variable name="readOnlyForm">
    <Description>Read only form for confirmation dialog.</Description>
  </Variable>
  <Variable initializer="serial" input="true" name="approvalMode">
    <Description>A string that specifies how we should handle the approvals. 



      By default this is serial since most of these request with

      the exception of manager transfers will have only one approver.



      parallel

      Approvals are processed concurrently and there must be consensus,

      we wait for all approvers to approve.  The first approver that

      rejects terminates the entire approval.



      parallelPoll

      Approvals are processed concurrently but consensus is not required.

      All approvals will be process, we don&amp;#39;t stop if there any

      rejections. 



      serial

      Approvals are processed one at a time and there must be consensus.

      The first approver that rejects terminates the entire approval.



      serialPoll

      Approvals are processed in order but consensus is not required.

      All approvals will be processed, we don&amp;#39;t stop if there are any

      rejections.  In effect we are &amp;quot;taking a poll&amp;quot; of the approvers.



      any

      Approvals are processed concurrently, the first approver to

      respond makes the decision for the group.</Description>
  </Variable>
  <Variable initializer="none" input="true" name="approvalScheme">
    <Description>A csv string that specifies how approvals should be generated for

      the incoming request.



      The value can be any of the values below, combined together but

      are always processed in this order:



      1. manager

      2. owner

      3. securityOfficer



      Any rejected items from previous approvals will be omitted from the 

      next phase of approvers.



      none - disabled approvals



      owner - the object owner gets the approval

      For Role approvals this is the Role object owner. When dealing

      with things like Unlock and other account level changes

      the approvals will be assigned to the the application owner.



      manager - The manager will get all approvals



      securityOfficer - The identity named security the security in the variable

      securityOfficerName.</Description>
  </Variable>
  <Variable name="approvingIdentities">
    <Description>approvingIdentities</Description>
  </Variable>
  <Variable initializer="continue" input="true" name="policyScheme">
    <Description>A String that specifies how policy checks effect the overall

      process.



      none - disabled policy checking



      continue -  continue if policy violations are found



      interactive -  allow requester to remove request items which are causing violations



      fail -  this option will cause the workflow to terminate immediately if any policy violations are found.

      Note that the requester will not be notified that the workflow has terminated.</Description>
  </Variable>
  <Variable initializer="user,requester" input="true" name="notificationScheme">
    <Description>A string that specifies who should be notified when the request has been complete.

      The value can be null or a csv of one or more of the following options.



      none or null

      disable notifications



      user

      Identity that is being update will be notified.



      manager

      The manager of the Identity that is being updated will be notified.



      requester

      The person that has requested the update will be notified.</Description>
  </Variable>
  <Variable editable="true" name="doRefresh">
    <Description>Set to true to cause an identity refresh after the changes in the plan

      have been provisioned.  This is normally off, you might want this on

      if you want modification of identity or link attributes to result in

      an immediate re-evaluation of assigned and detected roles.</Description>
  </Variable>
  <Variable name="exitWorkflow">
    <Description>Value posted by the &amp;quot;Exit Workflow&amp;quot; form button, to indicate the workflow should end.

      This is somethign handled in transitions on Approvals that have forms and gives

      a way for customers to exit the workflow.</Description>
  </Variable>
  <Variable name="groupModel" />
  <Variable name="plans" />
  <Variable name="identityModel" />
  <Description>A workflow for creating external Users.</Description>
  <Step icon="Start" name="Start" posX="28" posY="10">
    <Transition to="Initialize" />
  </Step>
  <Step action="call:getIdentityModel" name="Initialize" posX="98" posY="10" resultVariable="identityModel">
    <Arg name="identityName" value="ref:identityName" />
    <Description>
      Initialize the data for the identity that we are creating.
    </Description>
    <Transition to="Present Password Reset Form" />
  </Step>
  <Step name="Present Password Reset Form" posX="208" posY="10">
    <Approval owner="ref:launcher" return="identityModel" send="requester">
      <Arg name="workItemForm" value="User Password Reset Form" />
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemDescription" value="Password Reset Form" />
      <Arg name="workItemRequester" value="ref:requester" />
      <Arg name="workItemFormBasePath" value="identityModel" />
    </Approval>
    <Transition to="Present User Form" when="approved" />
    <Transition to="end" when="Cancel" />
  </Step>
  <Step name="Present User Form" posX="208" posY="10">
    <Approval owner="ref:launcher" return="identityModel" send="requester,launcher">
      <Arg name="workItemForm" value="Password Reset Form-Choose User" />
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemDescription" value="Password Reset Form" />
      <Arg name="workItemRequester" value="ref:requester" />
      <Arg name="workItemFormBasePath" value="identityModel" />
    </Approval>
    <Transition to="Present Password Form" when="approved" />
    <Transition to="end" when="Cancel" />
  </Step>
  <Step name="Present Password Form" posX="208" posY="10">
    <Approval owner="ref:launcher" return="identityModel" send="requester,launcher">
      <Arg name="workItemForm" value="Password Reset Form-Show Password" />
      <Arg name="workItemType" value="Form" />
      <Arg name="workItemDescription" value="Password Reset Form" />
      <Arg name="workItemRequester" value="ref:requester" />
      <Arg name="workItemFormBasePath" value="identityModel" />
    </Approval>
    <Transition to="SendSMS" when="approved" />
    <Transition to="end" when="Cancel" />
  </Step>
  <Step icon="Default" name="Build Plan" posX="360" posY="20">
    <Script>
      <Source>

        import sailpoint.object.ProvisioningPlan;

        import sailpoint.object.Identity;
        import java.util.List;

        import sailpoint.object.ProvisioningPlan.AccountRequest;

        import sailpoint.object.Application;

        import sailpoint.api.IdentityService;

        import sailpoint.object.Link;

        import sailpoint.object.*;

        import sailpoint.api.*;

        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.ProvisioningProject;
        import sailpoint.api.Provisioner;
        import sailpoint.api.PasswordGenerator;
          import sailpoint.object.PasswordPolicy;
          import sailpoint.object.Identity;


        log.error("inside build plan");
			
        String strApplicationName=null;
        String strAccountName=null;
				Identity identity = null;

        String identityName = (String)identityModel.get("user");
        if(null != identityName){
        	identity = context.getObjectByName(Identity.class,identityName);
        	if(null != identity){
          				List links = identity.getLinks();
          				if(null != links @and links.size() &gt; 0){
          					for(Link link: links){
          							if(null != link @and "Active Directory".equalsIgnoreCase(link.getApplicationName()) || "AD Contracotrs".equalsIgnoreCase(link.getApplicationName())){
														String sAMAccountNameFromLink = link.getAttribute("sAMAccountName");
        										if(void != adAccount @and null != adAccount){
        											if(sAMAccountNameFromLink.equals(adAccount)){
        											 strApplicationName =	link.getApplicationName();
        											 strAccountName =	link.getNativeIdentity();
        											 break;	
        											}
        										}
          							}
          					}
          				}
          			}
        }

        
String password = null;  	
          PasswordPolicy policy = null;

          try{


          policy = context.getObjectByName(PasswordPolicy.class,"Americana-AD-PasswordPolicy");
          if(policy!=null){

          password = new PasswordGenerator(context).generatePassword(policy);
          if(password!=null){

          password=password.replaceAll("\\s", ""); 
          
          }
          }

          }catch(Exception e){

          }
        
        ProvisioningPlan plan = new ProvisioningPlan();

				plan.setIdentity(identity);

				if(strApplicationName!=null &amp;&amp; !accounts.isDisabled() &amp;&amp;
        (strApplicationName.equalsIgnoreCase("Active Directory") || strApplicationName.equalsIgnoreCase("AD Contractors"))){
        log.error("strApplicationName is:::"+strApplicationName);

        AccountRequest acc = new AccountRequest();
        acc.setOperation(AccountRequest.Operation.Modify);
        acc.setApplication(strApplicationName);
        acc.add(new AttributeRequest("*password*",password));
        acc.setNativeIdentity(strAccountName);


        plan.add(acc);

        }
        

        System.out.println("plan - " + plan.toXml());

        log.error(plan.toXml());
        Provisioner prov=new Provisioner(context); 
        prov.setNoLocking(true);
        prov.setOptimisticProvisioning(true);
        ProvisioningProject project = prov.compile(plan);
        log.error("provisioned inot ad");
        prov.execute(project);
        // return p;

      </Source>
    </Script>
    <Transition to="SendSMS" />
  </Step>
  <Step icon="Default" name="Build Identity Name" posX="360" posY="20" resultVariable="identityName">
    <Script>
      <Source>

        log.error("inside Build Identity Name ");


        String identityName = (String)identityModel.get("user");

        //  return identityName;

      </Source>
    </Script>
    <Transition to="SendSMS" />
  </Step>
  <Step icon="Provision" name="Provision" posX="600" posY="20">
    <Arg name="approvalScheme" value="ref:approvalScheme" />
    <Arg name="fallbackApprover" value="ref:fallbackApprover" />
    <Arg name="endOnManualWorkItems" />
    <Arg name="userEmailTemplate" />
    <Arg name="workItemPriority" value="ref:workItemPriority" />
    <Arg name="workItemComments" value="ref:workItemComments" />
    <Arg name="identityRequestId" />
    <Arg name="source" />
    <Arg name="identityDisplayName" value="ref:identityDisplayName" />
    <Arg name="foregroundProvisioning" />
    <Arg name="batchRequestItemId" />
    <Arg name="trace" value="ref:trace" />
    <Arg name="endOnProvisioningForms" />
    <Arg name="plan" value="ref:plan" />
    <Arg name="flow" value="ref:flow" />
    <Arg name="identityName" value="ref:identityName" />
    <Arg name="notificationScheme" />
    <Arg name="approvalSet" value="ref:approvalSet" />
    <Arg name="manualActionsEmailTemplate" value="Pending Manual Changes" />
    <Arg name="policyViolations" value="ref:policyViolations" />
    <Arg name="policyScheme" value="ref:policyScheme" />
    <Arg name="splitProvisioning" value="ref:splitProvisioning" />
    <Arg name="isProvisioningFailed" />
    <Arg name="requesterEmailTemplate" />
    <Arg name="ticketManagementApplication" />
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning" />
    <Arg name="managerEmailTemplate" />
    <Arg name="ticketId" />
    <Arg name="launcher" value="ref:launcher" />
    <Description>

      Call the standard subprocess that will process the

      approval decisions and do provisioning.  This

      includes calling any configured provisioning

      connectors and building manual actions.

    </Description>
    <Return name="project" to="project" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="LCM Manage Passwords" />
    </WorkflowRef>
    <Transition to="end" />
  </Step>
  <Step icon="Default" name="SendSMS" posX="412" posY="151">
    <Script>
      <Source>
        import sailpoint.object.*;
        import sailpoint.api.*;
        import java.util.*;
        import java.text.MessageFormat;
        import javax.inject.Inject;
        import java.io.IOException;
        import java.util.*;
        import org.apache.commons.logging.Log;
        import org.apache.commons.logging.LogFactory;
        import sailpoint.object.*;
        import sailpoint.web.UserContext;
        import sailpoint.api.*;
        import sailpoint.messaging.MessageResult;
        import sailpoint.messaging.MessagingServiceProvider;
        import sailpoint.rest.ui.UserResetResource;
        import java.util.Scanner;
        import org.apache.http.HttpResponse;
        import org.apache.http.StatusLine;
        import org.apache.http.client.ClientProtocolException;
        import org.apache.http.client.methods.HttpGet;
        import org.apache.http.impl.client.CloseableHttpClient;
        import org.apache.http.impl.client.HttpClients;
        import java.io.BufferedReader;
        import java.io.DataOutputStream;
        import java.io.InputStreamReader;
        import javax.net.ssl.HttpsURLConnection;
        import java.net.URL;
        import java.net.URLEncoder;
        import sailpoint.web.LoginBean;
        import sailpoint.web.BaseBean;
        String id=null;

        id =  (String)identityModel.get("user");

        log.error("identity name is:::"+id);
        String mobile = null;

        String pswd = null;
        String server=null;
        String username=null;
        String password=null;
        String destination = null;
        String message=null;
        String source=null;
        String type=null;
        String dlr=null;
        Identity identity =null;
        identity = context.getObjectByName(Identity.class, id);
        if(identity!=null){
        mobile =identity.getAttribute("mobile");
        log.error("mobile num is::"+mobile);
        server="api.rmlconnect.net";
        pswd= (String) identityModel.get("newpassword");
        username="OTPsAMERICA";

        password="D0*j(5Pz";

        destination=mobile;

        message=pswd;

        source="Americana";

        type="0";

        dlr="0";

        //System.out.println("inside main");

        //System.out.println("msg is::"+message);

        //Sender("api.rmlconnect.net", "OTPsAMERICA", "D0*j(5Pz", "971509246851", "Your one time password is %m", "Americana", "5", "Americana", "60");

        // submitMessage();

        URL sendUrl = new URL("https://api.rmlconnect.net:443/bulksms/bulksms?");

        HttpsURLConnection httpsConnection = (HttpsURLConnection) sendUrl.openConnection();
        log.error("inside https connection");

        httpsConnection.setRequestMethod("POST");

        httpsConnection.setDoInput(true);

        httpsConnection.setDoOutput(true);

        httpsConnection.setUseCaches(false);

        DataOutputStream dataStreamToServer = new DataOutputStream(httpsConnection.getOutputStream());

        dataStreamToServer.writeBytes("username="+ URLEncoder.encode(username, "UTF-8") + "&amp;password="+ URLEncoder.encode(password, "UTF-8") + "&amp;message="+ URLEncoder.encode(message, "UTF-8")+"&amp;type="+ URLEncoder.encode(type, "UTF-8") + "&amp;dlr="+ URLEncoder.encode(dlr, "UTF-8")  + "&amp;destination="+ URLEncoder.encode(destination, "UTF-8") + "&amp;source="+ URLEncoder.encode(source, "UTF-8") );

        dataStreamToServer.flush();

        dataStreamToServer.close();

        BufferedReader dataStreamFromUrl = new BufferedReader(new InputStreamReader(httpsConnection.getInputStream()));

        String dataFromUrl = "", dataBuffer = "";

        while ((dataBuffer =dataStreamFromUrl.readLine()) != null) {

        dataFromUrl += dataBuffer;

        }

        dataStreamFromUrl.close();

        //System.out.println("Response: " + dataFromUrl);



        if(dataFromUrl.contains("1701")||dataFromUrl.contains(destination)) {

        log.error("message submitted successfully");

        }
        }

      </Source>
    </Script>
    <Transition to="end" />
  </Step>
  <Step icon="Stop" name="end" posX="315" posY="171" />
</Workflow>

</sailpoint>