<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Workflow explicitTransitions="true" libraries="Identity" name="Americana-ContractorWorkflow-AzureADLicenseAssignment" type="IdentityLifecycle">
  <Variable initializer="script: new Boolean(false);" name="azureADLink" />
  <Variable name="trace" />
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan, which is built by a service method. </Description>
  </Variable>
  <Variable editable="true" initializer="false" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.
    </Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to 
      see the results of the request.
    </Description>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover">
    <Description>
      A String that specifies the name of the Identity that will 
      be assigned any approvals where the owner of the approver 
      can't be resolved. Example if the scheme is "owner" and the 
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>
      String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.
    </Description>
  </Variable>
  <Variable initializer="false" input="true" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      ProvisioningProject which is just a compiled version of the ProvisioningPlan.
    </Description>
  </Variable>
  <Variable name="identityRequestId" output="true">
    <Description>
      The sequence id of the Identity request object which is stored in 
      the name field of the identity request.
    </Description>
  </Variable>
  <Variable name="cart" output="true">
    <Description>
      This variable includes all ApprovalItems that are part of 
      the request process and is updated during the AfterScript
      of the approval process by assimilating the decisions 
      and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable initializer="Normal" input="true" name="workItemPriority">
    <Description>
      The String version of a WorkItem.Priority. This variable is 
      used to set the priority on all of the workitems generated 
      as part of this workflow and also set on the IdentityRequest
      object.
    </Description>
  </Variable>
  <Variable name="mail" />
  <Description>Disable all accounts when an employee leaves the company.</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library" />
  </RuleLibraries>
  <Step icon="Start" name="CheckMail" posX="50" posY="10" resultVariable="mail">
    <Script>
      <Source>
        import sailpoint.object.Identity;
        import sailpoint.object.Link;
          import sailpoint.object.Application;
        import sailpoint.api.IdentityService;
          import sailpoint.tools.Util;
        Application application = null;

        Identity identity = null;
        String mail =null;

        if (identityName!=null) {
        identity = context.getObjectByName(Identity.class,identityName);
        if (identity != null) {
       
        IdentityService service = new IdentityService(context);
        application = context.getObjectByName(Application.class,"AD Contractors");        

        List adLinks = service.getLinks(identity,application);
       

        if (adLinks != null &amp;&amp; adLinks.size() == 1 )  {
         mail = adLinks.get(0).getAttribute("mail");
        if(mail!=null){
        return mail;
        }
        }
        }
        }
      </Source>
    </Script>
    <Transition to="end" when="script:(isNull(mail))" />
    <Transition to="CheckForAzureLink" />
  </Step>
  <Step name="CheckForAzureLink" posX="50" posY="10" resultVariable="azureADLink">
    <Script>
      <Source>
          import sailpoint.api.IdentityService;
          import sailpoint.tools.Util;
          import sailpoint.object.Identity;
          import sailpoint.object.Application;
          import sailpoint.object.Attributes;
          import sailpoint.object.ResourceObject; 
          import sailpoint.connector.Connector;
          import sailpoint.object.TaskResult; 
          import sailpoint.api.Aggregator;

          import org.apache.log4j.Level;
          import org.apache.log4j.Logger;

          Logger logger = Logger.getLogger("Americana.ContractorWorkflow.AzureADLicenseAssignment");
          logger.setLevel(Level.DEBUG);
log.error("mail is not null::"+mail);

          logger.debug("Start - Americana-ContractorWorkflow-AzureADLicenseAssignment.Step.CheckForAzureLink"); 


          String applicationName = "Azure AD";
          Identity identityObj = context.getObjectByName(Identity.class, identityName);
          Application appObject = context.getObjectByName(Application.class, applicationName);

          if(null != identityObj &amp;&amp; appObject != null){

          IdentityService isr = new IdentityService(context);
          List links = isr.getLinks(identityObj, appObject);

          if(Util.nullSafeSize(links) &gt; 0){
          return true;
          }
          else{

          String  azureDomainName = appObject.getAttributeValue("domainName");

          Application appObjectAD = context.getObjectByName(Application.class, "AD Contractors");
          List adLinks = isr.getLinks(identityObj, appObjectAD);
          logger.debug("adLinks : " + adLinks);

          String adSamName = "";
          if(Util.nullSafeSize(adLinks) &gt; 0){
          adSamName = adLinks.get(0).getAttribute("sAMAccountName");
          }
          String accountName =  adSamName + "@americana-food.com";

          logger.debug("accountName : " + accountName);

          Attributes attributes = new Attributes();

          String appConnName = appObject.getConnector();  
          logger.debug("Application " + applicationName + " uses connector " + appConnName);  

          Connector appConnector = sailpoint.connector.ConnectorFactory.getConnector(appObject, null);  
          if (null != appConnector) {  

          logger.debug("Connector instantiated, calling getObject() to read account details...");  

          ResourceObject rObj = null;  
          try {  
          rObj = (ResourceObject) appConnector.getObject("account", accountName, null);

          Attributes argMap = new Attributes();  
          argMap.put("correlateEntitlements",   "true");  
          argMap.put("noOptimizeReaggregation", "true");

          Aggregator agg = new Aggregator(context, argMap); 

          TaskResult result = agg.aggregate(appObject, rObj);
          log.debug("aggregation complete.");  

          if (result != null) {
          attributes = result.getAttributes();
          attributes.put("account", accountName);
          }
          } catch (sailpoint.connector.ObjectNotFoundException onfe) {  
          logger.error(onfe);   
          }  
          }

          logger.debug("attributes : "+attributes); 

          if(attributes.get("account") != null){
          return true;
          }
          }
          }

          logger.debug("Start - Americana-ContractorWorkflow-AzureADLicenseAssignment.Step.CheckForAzureLink"); 
          return false;
        </Source>
    </Script>
    <Transition to="Build Provisioning Plan" when="script:(azureADLink == true)" />
    <Transition to="WaitForNext10Min" />
  </Step>
  <Step icon="Start" name="WaitForNext10Min" posX="50" posY="10" wait="10">
    <Transition to="CheckForAzureLink" />
  </Step>
  <Step icon="Start" name="Build Provisioning Plan" posX="50" posY="10" resultVariable="plan">
    <Script>
      <Source>
          import sailpoint.api.IdentityService;
          import sailpoint.tools.Util;
          import sailpoint.object.Identity;
          import sailpoint.object.Application;
          import sailpoint.object.Link;
          import sailpoint.object.Custom;
          import sailpoint.object.ProvisioningPlan;
          import sailpoint.object.ProvisioningPlan.AccountRequest;
          import sailpoint.object.ProvisioningPlan.AttributeRequest;
          import sailpoint.object.Filter;
          import sailpoint.object.ManagedAttribute;
          import sailpoint.object.QueryOptions;

          import org.apache.log4j.Level;
          import org.apache.log4j.Logger;


          Logger logger = Logger.getLogger("Americana.ContractorWorkflow.AzureADLicenseAssignment.Step.BuildProvisioningPlan");
          logger.setLevel(Level.DEBUG);

          logger.debug("Start Step Build Provisioning Plan");
          String strContractor=null;
          String emailCheck=null;

          String azureADAppName = "Azure AD";
          List azureLicenseList = new ArrayList();
          ProvisioningPlan plan = null;
          Identity identityObj = context.getObjectByName(Identity.class, identityName);
          Application appObj = context.getObjectByName(Application.class, azureADAppName);
        
          String licenseValue = "";
          logger.debug("identityObj : "+identityObj);
          logger.debug("appObj : "+appObj); 
     
         if(null != identityObj &amp;&amp; appObj != null){

          Custom custom = context.getObjectByName(Custom.class, "Americana-Contractor-Custom-UserGradeVSLicenseMapping");
         // logger.debug("custom : "+custom);
          if(null != custom){
          String strLicenseName =custom.get(identityObj.getStringAttribute("gradeCode"));
          List licenseList=new ArrayList();

          //logger.debug("strLicenseName : "+strLicenseName);
          if(strLicenseName!=null){
          List displayNamesList = custom.get(strLicenseName);
          
          if(Util.nullSafeSize(displayNamesList) &gt; 0){

          Filter appFilter = Filter.and(Filter.eq("application.name", azureADAppName), Filter.eq("attribute", "assignedPlans"));
          Filter filter = Filter.and(appFilter, Filter.in("displayName", displayNamesList));
          logger.debug("filter : "+filter);
          QueryOptions op = new QueryOptions();
          op.setCloneResults(true);
          op.addFilter(filter);
          Iterator maitr = context.search(ManagedAttribute.class, op, "value");
          logger.debug("maitr : "+maitr);
          while(maitr.hasNext()){
          azureLicenseList.add( maitr.next()[0]);
          }
          }
          }
          }
  
        
          logger.debug("azureLicenseList : "+azureLicenseList);

          if(Util.nullSafeSize(azureLicenseList) &gt; 0){
          IdentityService isr = new IdentityService(context);
          List links = isr.getLinks(identityObj, appObj);
          logger.debug("links : "+links);
          if(Util.nullSafeSize(links) &gt; 0){

          Link aaLink = links.get(0);

          plan = new ProvisioningPlan();

          AccountRequest accountRequest = new AccountRequest(AccountRequest.Operation.Modify, aaLink.getApplicationName(), null, aaLink.getNativeIdentity());
          accountRequest.add(new AttributeRequest("assignedPlans", ProvisioningPlan.Operation.Add, azureLicenseList));

          accountRequest.add(new AttributeRequest("usageLocation", ProvisioningPlan.Operation.Add, identityObj.getAttribute("country")));
          plan.add(accountRequest);
          }
          }
          }

          logger.debug("End Step  Build Provisioning Plan : "+plan);
          return plan;

        </Source>
    </Script>
    <Transition to="Initialize" when="script:(plan != null)" />
    <Transition to="end" />
  </Step>
  <Step icon="Task" name="Initialize" posX="170" posY="10">
    <Arg name="formTemplate" value="Identity Update" />
    <Arg name="identityName" value="ref:identityName" />
    <Arg name="identityDisplayName" value="ref:identityDisplayName" />
    <Arg name="launcher" value="ref:launcher" />
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning" />
    <Arg name="plan" value="ref:plan" />
    <Arg name="policyScheme" value="none" />
    <Arg name="workItemPriority" value="ref:workItemPriority" />
    <Arg name="source" value="ref:source" />
    <Arg name="trace" value="ref:trace" />
    <Arg name="flow" value="Azure License Assignment" />
    <Description>
        Call the standard subprocess to initialize the request, this includes
        auditing, building the approvalset, compiling the plan into 
        project and checking policy violations.
      </Description>
    <Return name="project" to="project" />
    <Return name="approvalSet" to="cart" />
    <Return name="identityRequestId" to="identityRequestId" />
    <Return name="policyViolations" to="policyViolations" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize" />
    </WorkflowRef>
    <Transition to="Provision" />
  </Step>
  <Step icon="Task" name="Provision" posX="290" posY="10">
    <Arg name="approvalScheme" value="ref:approvalScheme" />
    <Arg name="fallbackApprover" value="ref:fallbackApprover" />
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning" />
    <Arg name="formTemplate" value="Identity Update" />
    <Arg name="identityDisplayName" value="ref:identityDisplayName" />
    <Arg name="identityName" value="ref:identityName" />
    <Arg name="identityRequestId" value="ref:identityRequestId" />
    <Arg name="launcher" value="ref:launcher" />
    <Arg name="manualActionsEmailTemplate" value="Pending Manual Changes" />
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning" />
    <Arg name="workItemPriority" value="ref:workItemPriority" />
    <Arg name="project" value="ref:project" />
    <Arg name="policyScheme" value="none" />
    <Arg name="noTriggers" value="true" />
    <Arg name="trace" value="ref:trace" />
    <Description>
        Call the standard subprocess that will process the 
        approval decisions and do provisioning.  This
        includes calling any configured provisioning 
        connectors and building manual actions.
      </Description>
    <Return name="project" to="project" />
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Provision" />
    </WorkflowRef>
    <Transition to="Finalize" />
  </Step>
  <Step catches="complete" icon="Task" name="Finalize" posX="410" posY="10">
    <Arg name="approvalSet" value="ref:cart" />
    <Arg name="project" value="ref:project" />
    <Arg name="workItemPriority" value="ref:workItemPriority" />
    <Arg name="trace" value="ref:trace" />
    <Arg name="identityRequestId" value="ref:identityRequestId" />
    <Arg name="identityName" value="ref:identityName" />
    <Description>
        Call the standard subprocess that can audit/finalize the request.
      </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Finalize" />
    </WorkflowRef>
    <Transition to="end" />
  </Step>
  <Step icon="Stop" name="end" posX="540" posY="10" />
</Workflow>

</sailpoint>